[
  {
    "scan_id": "b8304fbc-dbeb-4ed8-b6d0-4030679311cd",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2022-21698",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400",
              "CWE-772",
              "CWE-770"
            ]
          }
        ],
        "summary": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods.",
        "severity": "High",
        "components": {
          "go://github.com/prometheus/client_golang:1.11.0": {
            "fixed_versions": [
              "[1.11.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/prometheus/client_golang:1.11.0",
                  "full_path": "github.com/prometheus/client_golang"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-198244",
        "references": [
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/AK7CJBCGERCRXYUR2EWDSSDVAQMTAZGX/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5OGNAFVXSMTTT2UPH6CS3IH6L3KM42Q7",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FY3N7H6VSDZM37B4SKM2PFFCUWU7QYWN/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2PFW6Q2LXXWTFRTMTRN4ZGADFRQPKJ3D",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/KBMVIQFKQDSSTHVVJWJ4QH6TW3JVB7XZ/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZY2SLWOQR4ZURQ7UBRZ7JIX6H6F5JHJR/",
          "https://github.com/prometheus/client_golang/security/advisories/GHSA-cg3q-j54f-5p7p",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2IK53GWZ475OQ6ENABKMJMTOBZG6LXUR/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2IK53GWZ475OQ6ENABKMJMTOBZG6LXUR",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HLAQRRGNSO5MYCPAXGPH2OCSHOGHSQMQ",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2PFW6Q2LXXWTFRTMTRN4ZGADFRQPKJ3D/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/3L6GDN5S5QZSCFKWD3GKL2RDZQ6B4UWA/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/J5WPM42UR6XIBQNQPNQHM32X7S4LJTRX/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/7V7I72LSQ3IET3QJR6QPAVGJZ4CBDLN5/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/MH6ALXEQXIFQRQFNJ5Y2MJ5DFPIX76VN/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4KDETHL5XCT6RZN2BBNOCEXRZ2W3SFU3/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SASRKYHT5ZFSVMJUQUG3UAEQRJYGJKAR",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FY3N7H6VSDZM37B4SKM2PFFCUWU7QYWN",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KBMVIQFKQDSSTHVVJWJ4QH6TW3JVB7XZ",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AK7CJBCGERCRXYUR2EWDSSDVAQMTAZGX",
          "https://github.com/prometheus/client_golang/pull/987",
          "https://pkg.go.dev/vuln/GO-2022-0322",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZY2SLWOQR4ZURQ7UBRZ7JIX6H6F5JHJR",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/36GUEPA5TPSC57DZTPYPBL6T7UPQ2FRH/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/36GUEPA5TPSC57DZTPYPBL6T7UPQ2FRH",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/7V7I72LSQ3IET3QJR6QPAVGJZ4CBDLN5",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RN7JGC2LVHPEGSJYODFUV5FEKPBVG4D7",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZKORFJTRRDJCWBTJPISKKCVMMMJBIRLG",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SASRKYHT5ZFSVMJUQUG3UAEQRJYGJKAR/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/5OGNAFVXSMTTT2UPH6CS3IH6L3KM42Q7/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MH6ALXEQXIFQRQFNJ5Y2MJ5DFPIX76VN",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3L6GDN5S5QZSCFKWD3GKL2RDZQ6B4UWA",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-21698",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RN7JGC2LVHPEGSJYODFUV5FEKPBVG4D7/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4KDETHL5XCT6RZN2BBNOCEXRZ2W3SFU3",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J5WPM42UR6XIBQNQPNQHM32X7S4LJTRX",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZKORFJTRRDJCWBTJPISKKCVMMMJBIRLG/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HLAQRRGNSO5MYCPAXGPH2OCSHOGHSQMQ/",
          "https://github.com/prometheus/client_golang/releases/tag/v1.11.1",
          "https://github.com/prometheus/client_golang",
          "https://github.com/prometheus/client_golang/pull/962"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-29526",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cwe": [
              "CWE-269"
            ]
          }
        ],
        "summary": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
        "severity": "Medium",
        "components": {
          "go://golang.org/x/sys:0.0.0-20210603081109-ebe580a85c40": {
            "fixed_versions": [
              "[0.0.0-20220412211240-33da011f77ad]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://golang.org/x/sys:0.0.0-20210603081109-ebe580a85c40",
                  "full_path": "golang.org/x/sys"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-229670",
        "references": [
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RQXU752ALW53OJAF5MG3WMR5CCZVLWW6/",
          "https://go.dev/issue/52313",
          "https://security.gentoo.org/glsa/202208-02",
          "https://pkg.go.dev/vuln/GO-2022-0493",
          "https://groups.google.com/g/golang-announce",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Q6GE5EQGE4L2KRVGW4T75QVIYAXCLO5X/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Q6GE5EQGE4L2KRVGW4T75QVIYAXCLO5X",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RQXU752ALW53OJAF5MG3WMR5CCZVLWW6",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-29526",
          "https://github.com/golang/go/issues/52313",
          "https://security.netapp.com/advisory/ntap-20220729-0001/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Z55VUVGO7E5PJFXIOVAY373NZRHBNCI5/",
          "https://go.dev/cl/399539",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZY2SLWOQR4ZURQ7UBRZ7JIX6H6F5JHJR",
          "https://github.com/advisories/GHSA-p782-xgp4-8hr8",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z55VUVGO7E5PJFXIOVAY373NZRHBNCI5",
          "https://security.netapp.com/advisory/ntap-20220729-0001",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZY2SLWOQR4ZURQ7UBRZ7JIX6H6F5JHJR/",
          "https://groups.google.com/g/golang-announce/c/Y5qrqw_lWdU",
          "https://go.dev/cl/400074"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24786",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-835",
              "CWE-1286"
            ]
          }
        ],
        "summary": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
        "severity": "Medium",
        "components": {
          "go://google.golang.org/protobuf:1.26.0-rc.1": {
            "fixed_versions": [
              "[1.33.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://google.golang.org/protobuf:1.26.0-rc.1",
                  "full_path": "google.golang.org/protobuf"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-593650",
        "references": [
          "http://www.openwall.com/lists/oss-security/2024/03/08/4",
          "https://go.dev/cl/569356",
          "https://pkg.go.dev/vuln/GO-2024-2611",
          "https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0",
          "https://security.netapp.com/advisory/ntap-20240517-0002",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JDMBHAVSDU2FBDZ45U3A2VLSM35OJ2HU/",
          "https://security.netapp.com/advisory/ntap-20240517-0002/",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24786",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JDMBHAVSDU2FBDZ45U3A2VLSM35OJ2HU",
          "https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023",
          "https://github.com/advisories/GHSA-8r3f-844c-mc37"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30629",
            "cvss_v3_score": "3.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
            "cwe": [
              "CWE-200",
              "CWE-330"
            ]
          }
        ],
        "summary": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
        "severity": "Low",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.11]",
              "[1.18.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248650",
        "references": [
          "https://go.dev/cl/405994",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30629",
          "https://go.googlesource.com/go/+/fe4de36198794c447fbd9d7cc2d7199a506c76a5",
          "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ",
          "https://pkg.go.dev/vuln/GO-2022-0531",
          "https://go.dev/issue/52814"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24791",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "summary": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail. An attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.12]",
              "[1.22.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616759",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24791",
          "https://go.dev/issue/67555",
          "https://groups.google.com/g/golang-dev/c/t0rK-qHBqzY/m/6MMoAZkMAgAJ",
          "https://go.dev/cl/591255",
          "https://pkg.go.dev/vuln/GO-2024-2963"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45288",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cwe": [
              "CWE-400"
            ]
          }
        ],
        "summary": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.9]",
              "[1.22.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-597401",
        "references": [
          "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45288",
          "https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M",
          "http://www.openwall.com/lists/oss-security/2024/04/03/16",
          "https://go.dev/cl/576155",
          "https://security.netapp.com/advisory/ntap-20240419-0009",
          "https://security.netapp.com/advisory/ntap-20240419-0009/",
          "https://github.com/advisories/GHSA-qc6v-5g5m-8cw2",
          "https://github.com/zitadel/zitadel-go/security/advisories/GHSA-qc6v-5g5m-8cw2",
          "https://pkg.go.dev/vuln/GO-2024-2631",
          "https://www.cve.org/CVERecord?id=CVE-2023-45288",
          "https://pkg.go.dev/vuln/GO-2024-2611",
          "https://github.com/zitadel/zitadel-go/releases/tag/v3.0.0-next.3",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QRYFHIQ6XRKRYBI2F5UESH67BJBQXUPT",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QRYFHIQ6XRKRYBI2F5UESH67BJBQXUPT/",
          "https://pkg.go.dev/vuln/GO-2024-2687",
          "http://www.openwall.com/lists/oss-security/2024/04/05/4",
          "https://nowotarski.info/http2-continuation-flood-technical-details",
          "https://go.dev/issue/65051"
        ],
        "extended_information": {
          "short_description": "A design problem in the implementation of the HTTP/2 protocol in Golang may lead to denial of service by abusing frame flags.",
          "full_description": "The `net/http` package in Go is used for handling HTTP requests and responses.\n`HTTP/2` is a binary protocol where the client and server exchange binary frames instead of text lines as in `HTTP/1.x`. `HTTP/2` resolves numerous concerns found in HTTP/1.1 by organizing each HTTP message into a series of HTTP/2 frames. These frames include frame type, length, flags, stream identifier (ID), and payload.\n\nThe `HEADERS` frame type allows sending HTTP headers of, both, request and response. The `HEADERS` frame contains many flags.\nThe `CONTINUATION` frame type is similar to the `HEADER` frame, but it has just one flag: `END_HEADERS`. When it is not set, the peer knows that more headers are coming in the following `CONTINUATION` frames.\n\nThis mechanism allows an attacker to send an `HTTP/2` stream with `CONTINUATION` frames, without setting the `END_HEADERS` flag in any of the frames. This can cause denial-of-service when sending an excessive number of these crafted frames due to caching all frames in memory.\n\nThough the `net/http` package uses HTTP/2 by default, a Golang web server must have HTTPS configured to be vulnerable to exploitation.\nThe `x/net/http2` package is vulnerable by default.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "Though the `net/http` package uses HTTP/2 by default, a Golang web server must have HTTPS configured to be vulnerable to exploitation.\nThe `x/net/http2` package is vulnerable by default.",
              "is_positive": true
            },
            {
              "name": "The issue has multiple mentions in general media",
              "description": "This issue is related to the well-covered attack \"HTTP/2 CONTINUATION Flood\"."
            },
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development",
              "description": "A very detailed technical write-up has been published regarding the issue."
            },
            {
              "name": "The issue can be exploited by attackers over the network"
            }
          ],
          "remediation": "##### Development mitigations\n\nFrom Golang version 1.6, the `net/http` package is using the `HTTP/2` protocol by default when using HTTPS. You can disable HTTP/2 by setting `Server.TLSNextProto` (for servers) to a non-nil, empty map.\n\nFor example:\n```\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n    \"crypto/tls\"\n)\n\nfunc main() {\n    m := http.NewServeMux()\n    srv := \u0026http.Server{\n        Handler:      m,\n        Addr:         \"127.0.0.1:8080\",\n        TLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler)),\n    }\n    log.Fatal(srv.ListenAndServe())\n}\n```\n\nAlternatively, the following GODEBUG settings are also supported, which disables the HTTP/2 server support:\n```\nGODEBUG=http2server=0\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2025-22871",
            "cvss_v3_score": "9.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
            "cwe": [
              "CWE-1395",
              "CWE-444"
            ]
          }
        ],
        "summary": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.23.8]",
              "[1.24.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-692219",
        "references": [
          "https://github.com/traefik/traefik/releases/tag/v3.3.6",
          "https://go.dev/issue/71988",
          "https://groups.google.com/g/golang-announce/c/Y2uBTVKjBQk",
          "https://pkg.go.dev/vuln/GO-2025-3563",
          "https://github.com/traefik/traefik/releases/tag/v3.4.0-rc2",
          "https://go.dev/cl/652998",
          "https://github.com/traefik/traefik/security/advisories/GHSA-5423-jcjm-2gpv",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-22871",
          "http://www.openwall.com/lists/oss-security/2025/04/04/4",
          "https://github.com/traefik/traefik/releases/tag/v2.11.24",
          "https://github.com/advisories/GHSA-5423-jcjm-2gpv"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Go's net/http may lead to request smuggling when parsing HTTP requests.",
          "full_description": "The `net/http` package in Go is used for handling HTTP requests and responses.\nThe HTTP protocol uses `CRLF` characters (`\\r\\n`) as line terminators, and it does not allow bare LF (cases where only `\\n` is present, meaning partial `CRLF`) to be used in chunked encoding.\nIn HTTP chunked transfer encoding, the `chunk-size` is a value indicating the number of bytes in the subsequent data chunk.\n\nThe `net/http` library does not reject these bare `LF` characters, but instead allows them in a `chunk-size` line, which may lead to request smuggling under the right conditions:\n\n1. The reverse proxy allows bare `LF` characters and doesn't interpret them as line terminators.\n\n2. The backend server allows bare `LF` characters and interprets them as line terminators.\n\nWith the above configuration, HTTP requests reach the backend server, where they are split due to the interpretation of the bare LF as a line terminator. Thus, the smuggled request is processed as an additional individual request.\n\nFor the backend server, there are such servers, for example, `Nginx` or anything that uses Go's `net/http`,  which is unpatched to this vuln (after this patch, Go's `net/http` completely rejects bare LF).\n\nHowever, for reverse proxy, there is no such known proxy (including `Nginx`, `Traefik`). Most known proxies either disallow Bare LF or treat it as a line terminator.\n\nHTTP Request Smuggling is a web security vulnerability where conflicting interpretations of HTTP specifications by different front-end and back-end servers can lead to request manipulation by attackers.\nThis type of attack can lead to the following impacts: DoS, SSRF, XXS, data leakage, cache poisoning, session manipulation, security bypass, and business logic abuse.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue can be exploited by attackers over the network",
              "description": "The vulnerability can be remotely exploited by sending a crafted HTTP request."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "For the vulnerability to be exploitable, both the reverse proxy and the backend server should allow for bare LF characters to be used in chunk-size lines in an HTTP request. Specifically, the backend server should interpret the bare LF character as a line terminator, while the reverse proxy shouldn't.",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "The attacker needs to simply inject CRLF characters to the `Origin` header of the HTTP response, to cause the response to be splitted."
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The impact of HTTP request smuggling vulnerabilities always depends on the context, and specifically, which security check is bypassed in the front-end proxy via the smuggling. The smuggling may allow an attacker to bypass security controls, gain unauthorized access to sensitive data, and possibly compromise other application users.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2025-22866",
            "cvss_v3_score": "4.0",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cwe": [
              "CWE-208"
            ]
          }
        ],
        "summary": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.22.12]",
              "[1.23.6]",
              "[1.24.0-rc.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-669928",
        "references": [
          "https://security.netapp.com/advisory/ntap-20250221-0002/",
          "https://pkg.go.dev/vuln/GO-2025-3447",
          "https://go.dev/issue/71383",
          "https://go.dev/cl/643735",
          "https://groups.google.com/g/golang-announce/c/xU1ZCHUZw3k",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-22866"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30634",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-835"
            ]
          }
        ],
        "summary": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.11]",
              "[1.18.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-231116",
        "references": [
          "https://pkg.go.dev/vuln/GO-2022-0477",
          "https://go.googlesource.com/go/+/bb1f4416180511231de6d17a1f2f55c82aafc863",
          "https://go.dev/issue/52561",
          "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ",
          "https://go.dev/cl/402257",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30634"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-39319",
            "cvss_v3_score": "6.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cwe": [
              "CWE-79"
            ]
          }
        ],
        "summary": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.8]",
              "[1.21.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-531549",
        "references": [
          "https://security.netapp.com/advisory/ntap-20231020-0009/",
          "https://go.dev/issue/62197",
          "https://go.dev/cl/526157",
          "https://pkg.go.dev/vuln/GO-2023-2043",
          "https://groups.google.com/g/golang-dev/c/2C5vbR-UNkI/m/L1hdrPhfBAAJ",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-39319",
          "https://security.gentoo.org/glsa/202311-09"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45290",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400",
              "CWE-770"
            ]
          }
        ],
        "summary": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion. With fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.8]",
              "[1.22.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616745",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45290",
          "https://go.dev/issue/65383",
          "https://pkg.go.dev/vuln/GO-2024-2599",
          "https://security.netapp.com/advisory/ntap-20240329-0004/",
          "http://www.openwall.com/lists/oss-security/2024/03/08/4",
          "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg",
          "https://go.dev/cl/569341"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24538",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-94"
            ]
          }
        ],
        "summary": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.8]",
              "[1.20.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-513412",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241115-0007/",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24538",
          "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8",
          "https://pkg.go.dev/vuln/GO-2023-1703",
          "https://go.dev/issue/59234",
          "https://security.gentoo.org/glsa/202311-09",
          "https://go.dev/cl/482079"
        ],
        "extended_information": {
          "short_description": "Missing delimiter escaping in Go html/template leads to JavaScript code injection when using Go template actions inside JavaScript template literals.",
          "full_description": "Go's [html/template](https://pkg.go.dev/html/template) package implements data-driven templates for generating HTML output safe against code injection.\nIt was discovered that the template package does not properly consider backticks as JavaString string delimiters, and do not escape them as expected.\nTherefore, if a Go template contains a Go template action (for example `{{.}}`) within a JavaScript template literal (any literal delimited by a backtick \\` character) and an attacker can control the output of the Go template action, then the attacker can output the backtick character from the action which will escape the JavaScript template literal and allow arbitrary JavaScript code injection\n\nVulnerable template example -\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n    \u003ctitle\u003eUnsafe Template Example\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003c!-- \n        Vulnerable Implementation\n        Go template action within a JavaScript template literal\n        Assume payload: `;alert(1);//\n    --\u003e\n    \u003cscript\u003e\n        let data = `{{.}}`;\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nViewing the above rendered template in a browser (assuming the attacker payload was \"\\`;alert(1);//\") will cause an `alert` popup.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS critical score (9.8) does not take into account the per-target research that must be done to exploit this vulnerability and the fact that the vulnerability is most likely to cause an XSS (JavaScript running in a browser) and not unsandboxed code execution",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker can inject arbitrary JavaScript code simply by inserting a backtick character to escape the JavaScript template literal"
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "Most likely, the rendered template will be used in a webpage that is viewed in a browser. In this case, exploitation will result in XSS (JavaScript code injection in the browser) which is less severe than unsandboxed RCE. In cases where the rendered template is directly used in a Node.js application or Electron application, exploitation may lead to unsandboxed RCE.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "A vulnerable Go template must be rendered using `Template.Execute` or `Template.ExecuteTemplate`",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attacker must be able to control the output of a Go template action which is wrapped with backticks (meaning - it is treated as a JavaScript template literal)",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30580",
            "cvss_v3_score": "7.8",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-94"
            ]
          }
        ],
        "summary": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.11]",
              "[1.18.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248651",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30580",
          "https://go.dev/cl/403759",
          "https://pkg.go.dev/vuln/GO-2022-0532",
          "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ",
          "https://go.dev/issue/52574",
          "https://go.googlesource.com/go/+/960ffa98ce73ef2c2060c84c7ac28d37a83f345e"
        ],
        "extended_information": {
          "short_description": "Execution path hijacking in Golang's Cmd.Run, Cmd.Start, Cmd.Output and Cmd.CombinedOutput allows for local privilege escalation.",
          "full_description": "On Windows, executing `Cmd.Run`, `Cmd.Start`, `Cmd.Output`, or `Cmd.CombinedOutput` when `Cmd.Path` is unset will unintentionally trigger execution of any binaries in the working directory named either `..com` or `..exe` \n\nAn attacker that can plant a malicious executable in the same working directory as a vulnerable Go application, will achieve code execution in the privileges of the vulnerable Go application.\nNote that it is extremely rare that any of the vulnerable APIs will be called with `Cmd.Path` being unset.\n\nExample code that can trigger this issue -\n```go\nfunc TestNoPath(t *testing.T) {\n\terr := new(exec.Cmd).Start()\n\twant := \"exec: no command\"\n\tif err == nil || err.Error() != want {\n\t\tt.Errorf(\"new(Cmd).Start() = %v, want %q\", err, want)\n\t}\n}\n```\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue can only be exploited by an attacker that can execute code on the vulnerable machine (excluding exceedingly rare circumstances)",
              "description": "The attacker must be able to plant a malicious executable in a specified directory with a specified name",
              "is_positive": true
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Local privilege escalation with the privileges of the vulnerable Go application",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker simply needs to plant a malicious executable in a specified directory with a specified name"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "It is extremely rare that any of the vulnerable APIs will be called with `Cmd.Path` being unset. In addition, the attacker must be able to plant an executable named `..exe` or `..com` in the working directory of the vulnerable Go app.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The vulnerable Go application must call `Cmd.Run`, `Cmd.Start`, `Cmd.Output`, or `Cmd.CombinedOutput` when `Cmd.Path` is unset. For example -\n```go\nerr := new(exec.Cmd).Start()\n```",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30633",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248630",
        "references": [
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30633",
          "https://pkg.go.dev/vuln/GO-2022-0523",
          "https://go.dev/cl/417061",
          "https://go.googlesource.com/go/+/c4c1993fd2a5b26fe45c09592af6d3388a3b2e08",
          "https://go.dev/issue/53611"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang encoding/xml.Unmarshal leads to denial of service when processing attacker-supplied XML documents into structs with the \"any\" field tag.",
          "full_description": "The `Unmarshal` method allows deserializing XML documents into Golang types.\n\nIt was discovered that Unmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion, which will crash the calling Go process.\n\nExample code snippet vulnerable to this issue -\n```go\n// Need a struct that uses the \"any\" field tag\ntype nested struct {\n\tParent *nested `xml:\",any\"`\n}\n\nvar vulnerable_struct nested\nerr := Unmarshal(attacker_input, \u0026vulnerable_struct)\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into a `encoding/xml.Unmarshal` API call (first argument) while the `Unmarshal` 2nd argument points to a struct that has the `any` field tag",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30635",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248647",
        "references": [
          "https://go.dev/issue/53615",
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://pkg.go.dev/vuln/GO-2022-0526",
          "https://go.dev/cl/417064",
          "https://go.googlesource.com/go/+/6fa37e98ea4382bf881428ee0c150ce591500eb7",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30635"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang encoding/gob.Decoder.Decode leads to denial of service when decoding attacker-supplied Gob streams.",
          "full_description": "Golang supports an optimized encoder/decoder called \"gob\" for binary values exchanged between an Encoder (transmitter) and a Decoder (receiver). A typical use is transporting arguments and results of remote procedure calls (RPCs) such as those provided by package \"net/rpc\".\n\nIt was discovered that calling `Decoder.Decode` on a message which contains deeply nested structures can cause a panic due to stack exhaustion., which will crash the calling Go process.\n\nExample code snippet vulnerable to this issue-\n```go\ndec := NewDecoder(attacker_input)\ndec.Decode(\u0026output)\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into a `NewDecoder` API call (first argument). The built `Decoder` must then invoke the `Decode` call",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24532",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cwe": [
              "CWE-682"
            ]
          }
        ],
        "summary": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.7]",
              "[1.20.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-427380",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24532",
          "https://go.dev/issue/58647",
          "https://groups.google.com/g/golang-announce/c/3-TpUx48iQY",
          "https://go.dev/cl/471255",
          "https://pkg.go.dev/vuln/GO-2023-1621"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29402",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-94"
            ]
          }
        ],
        "summary": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.10]",
              "[1.20.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-521544",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241213-0004/",
          "https://go.dev/issue/60167",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XBS3IIK6ADV24C5ULQU55QLT2UE762ZX/",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29402",
          "https://pkg.go.dev/vuln/GO-2023-1839",
          "https://go.dev/cl/501226",
          "https://groups.google.com/g/golang-announce/c/q5135a9d924/m/j0ZoAJOHAwAJ",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NZ2O6YCO2IZMZJELQGZYR2WAUNEDLYV6/",
          "https://security.gentoo.org/glsa/202311-09"
        ],
        "extended_information": {
          "short_description": "Compiling Go source code that uses cgo may lead to code injection when the working path contains a newline.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The code injection requires that -\n1. The Go source code uses \"cgo\" (code contains `import \"C\"`)\n2. The directory name from which the package is built, contains a newline character\nNote that malicious code execution will only happen when running the built module (the vulnerability does not trigger code execution on build time)",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The issue is very unlikely to be exploited maliciously, and can only be used to somewhat hide malicious code, since the attack requires the user to build Go source code from a directory that has a crafted name. Since the malicious code will only be executed when running the built module (and not at build time), successful attacks will require the victim to build an untrusted package and execute it, which is an extremely bad practice regardless of this vulnerability.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC from test code demonstrates code injection"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24790",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "NVD-CWE-noinfo",
              "CWE-180"
            ]
          }
        ],
        "summary": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.11]",
              "[1.22.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-606108",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24790",
          "https://www.cve.org/CVERecord?id=CVE-2024-24790",
          "https://go.dev/cl/590316",
          "https://github.com/traefik/traefik/releases/tag/v2.11.4",
          "http://www.openwall.com/lists/oss-security/2024/06/04/1",
          "https://go.dev/issue/67680",
          "https://pkg.go.dev/vuln/GO-2024-2917",
          "https://pkg.go.dev/vuln/GO-2024-2887",
          "https://github.com/advisories/GHSA-7jmw-8259-q9jx",
          "https://github.com/traefik/traefik/security/advisories/GHSA-7jmw-8259-q9jx",
          "https://groups.google.com/g/golang-announce/c/XbxouI9gY7k/m/TuoGEhxIEwAJ",
          "https://github.com/traefik/traefik/releases/tag/v3.0.2"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-1705",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
            "cwe": [
              "CWE-444"
            ]
          }
        ],
        "summary": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248633",
        "references": [
          "https://go.dev/cl/410714",
          "https://go.googlesource.com/go/+/e5017a93fcde94f09836200bca55324af037ee5f",
          "https://go.dev/cl/409874",
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://pkg.go.dev/vuln/GO-2022-0525",
          "https://go.dev/issue/53188",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-1705"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41725",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-770",
              "CWE-400"
            ]
          }
        ],
        "summary": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.6]",
              "[1.20.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-426747",
        "references": [
          "https://go.dev/issue/58006",
          "https://pkg.go.dev/vuln/GO-2023-1569",
          "https://security.gentoo.org/glsa/202311-09",
          "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E",
          "https://go.dev/cl/468124",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41725"
        ],
        "extended_information": {
          "short_description": "Missing length checks in Go's net/http and mime/multipart packages can lead to denial of service when processing crafted packets.",
          "full_description": "The `net/http` and `mime/multipart` packages in Go are used for handling HTTP requests and responses, and for parsing multipart/form-data requests, respectively.\nWhen handling HTTP requests that contain multipart form data, the Go programming language provides two packages: `mime/multipart` and `net/http`. Multipart form data can be parsed using the `mime/multipart.Reader.ReadForm` function, as well as the Request methods `FormFile`, `FormValue`, `ParseMultipartForm`, and `PostFormValue` provided by the `net/http` package.\n\nBy default, the maximum amount of memory that can be used for buffering is set to `maxMemory` bytes + 10MB. However, there was an issue where certain metadata such as map entry overhead, part names, and MIME headers were not included in the memory size calculation. This could allow an attacker that controls the metadata's length to create excessively large files that could potentially exhaust the available disk space and cause a denial of service.\n\nVulnerable code example -\n```go\n// forms.go\npackage main\n\nimport (\n    \"html/template\"\n    \"net/http\"\n)\n\ntype ContactDetails struct {\n    Email   string\n    Subject string\n    Message string\n}\n\nfunc main() {\n    tmpl := template.Must(template.ParseFiles(\"forms.html\"))\n\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        if r.Method != http.MethodPost {\n            tmpl.Execute(w, nil)\n            return\n        }\n\n        details := ContactDetails{\n            Email:   r.FormValue(\"email\"),\n            Subject: r.FormValue(\"subject\"),\n            Message: r.FormValue(\"message\"),\n        }\n\n        // do something with details\n        _ = details\n\n        tmpl.Execute(w, struct{ Success bool }{true})\n    })\n\n    http.ListenAndServe(\":8080\", nil)\n}\n```",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that HTTP form data will be received from possibly untrusted sources"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attackers must find an input that propagates to one of the vulnerable functions - \n\n* mime/multipart `Reader.ReadForm`\n* net/http `Request.FormFile`\n* net/http `Request.FormValue`\n* net/http `Request.ParseMultipartForm`\n* net/http `Request.PostFormValue`",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "A request containing large multipart form data is enough to trigger the issue."
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This issue leads to denial of service in server applications."
            }
          ],
          "remediation": "##### Development mitigations\n\nThe `multipart.ReadForm` and the `http.Request` methods that call it do not limit the amount of disk space consumed by temporary files, so callers can limit the size of form data using `http.MaxBytesReader`.\nExample:\n```\nhttp.HandleFunc(\"/bar\", func(w http.ResponseWriter, r *http.Request) {\n\t// Limit to 1MB\n\tmaxSize = 1024*1024 \n        r.Body = http.MaxBytesReader(w, nopCloser{r.Body}, maxSize)\n})\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41720",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-22"
            ]
          }
        ],
        "summary": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.18.9]",
              "[1.19.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-263271",
        "references": [
          "https://go.dev/issue/56694",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41720",
          "https://go.dev/cl/455716",
          "https://pkg.go.dev/vuln/GO-2022-1143",
          "https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Golang allows attackers to perform path traversal via os.DirFS and http.dir.",
          "full_description": "[Golang](https://go.dev/) is a statically typed, compiled programming language.\n\nDue to insufficient checks in `os.DirFS` and `http.dir`, an attacker can perform path traversal and access any files on the system (according to the user's access).\n\nThere are multiple ways to trigger this vulnerability -\n\nOn Linux, opening an empty directory tree (`\"\"`) will be mistakenly treated as opening the root (`/`).\nAn example that will mistakenly open `/tmp`:\n`os.DirFS(\"\").Open(\"tmp\")`\n\nOn Windows, the affected functions mistakenly permitted access to Windows-reserved device names (for example `COM1` or `NUL`).\nAn example that will open `COM1` (works with any argument to `DirFS`):\n`os.DirFS(\"C:/tmp\").Open(\"COM1\")`\n\nAnother way to trigger the issue on Windows would be using ```os.DirFS(`\\`)``` which will permit an attacker to escape from the drive and access any path on the system (including network shares).",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The security impact of exploiting this vulnerability highly depends on the 1st-party code that uses `os.DirFS()` or `http.dir()`.\nFor example, if the code uses `os.DirFS(\"\").Open(attacker_filename)` in order to create an attacker-named externally-writable file in the current directory, the attacker will actually be able to create the file in an arbitrary filepath, leading to arbitrary file overwrite",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "GitHub Issue contains PoC snippets with multiple ways to trigger the vulnerability."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a remote service that takes user input and specifically opens a file after calling the `os.DirFS()` or `http.dir()` functions. Refer to the full applicability conditions in the full description.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-34158",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.22.7]",
              "[1.23.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-642404",
        "references": [
          "https://groups.google.com/g/golang-dev/c/S9POB9NCTdk",
          "https://go.dev/issue/69141",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-34158",
          "https://pkg.go.dev/vuln/GO-2024-3107",
          "https://go.dev/cl/611240"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29406",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-436",
              "CWE-113"
            ]
          }
        ],
        "summary": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.11]",
              "[1.20.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-523140",
        "references": [
          "https://pkg.go.dev/vuln/GO-2023-1878",
          "https://groups.google.com/g/golang-announce/c/2q13H6LEEx0",
          "https://go.dev/issue/60374",
          "https://security.netapp.com/advisory/ntap-20230814-0002/",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29406",
          "https://go.dev/cl/506996",
          "https://security.gentoo.org/glsa/202311-09"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45285",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "NVD-CWE-noinfo",
              "CWE-636"
            ]
          }
        ],
        "summary": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.12]",
              "[1.21.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-540330",
        "references": [
          "https://go.dev/cl/540257",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45285",
          "https://pkg.go.dev/vuln/GO-2023-2383",
          "https://go.dev/issue/63845",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UIU6HOGV6RRIKWM57LOXQA75BGZSIH6G/",
          "https://groups.google.com/g/golang-dev/c/6ypN5EjibjM/m/KmLVYH_uAgAJ"
        ],
        "extended_information": {
          "short_description": "A design problem in Go's `cmd/go` allows network attackers to perform man-in-the-middle attacks when a client fetches a module with the `.git` suffix and without an explicit URL scheme.",
          "full_description": "[cmd/go](https://pkg.go.dev/cmd/go) is a command-line tool and part of the Go programming language's toolchain. It is primarily used for managing Go modules, which are collections of Go packages and their dependencies.\nThe logic in `(*vcs).vcs.repoRootFromVCSPaths` function, part of the `cmd/go` package, has a design problem when processing a module's `url` that ends with the `.git` suffix (`foo/bar.git`) and is unavailable via secure protocols (`https`, `ssh`). \n\nFor example, when fetching a module with a URL that has no scheme and ends with `.git` -\n`go get -x dgl.cx/foo.git`\nIf the module cannot be fetched with the `https://` or `git+ssh://` schemes, then Go will unexpectedly try to fetch the module using insecure schemes such as `http://` and `git://`, which allows for man-in-the-middle attacks that can lead to data leakages or even indirect remote code execution (by attackers tampering with the fetched source code).",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "Attackers can mount MitM attacks on fetched Go modules, if the client fetches the module using a URL that satisfies the following conditions:\n1. The URL has to end with `.git`.\n2. The URL must not contain an explicit scheme\n3. The user is fetching modules directly (i.e. sets GOPROXY=off), which is not the default scenario.",
              "is_positive": true
            },
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development",
              "description": "The GitHub issue details the vulnerability and how to trigger it."
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nUse an explicit (secure) scheme when fetching Go modules.\nFor example instead of -\n```\ngo get -x dgl.cx/foo.git\n```\n\nUse - \n```\ngo get -x https://dgl.cx/foo.git\n```\n\nor alternatively -\n```\ngo get -x git+ssh://dgl.cx/foo.git\n```\n```\n\n##### Deployment mitigations\n\nDo not disable the module proxy.\nSpecifically, do not set the environment variable `GOPROXY=off`."
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29400",
            "cvss_v3_score": "7.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cwe": [
              "CWE-94",
              "CWE-74"
            ]
          }
        ],
        "summary": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.9]",
              "[1.20.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-520139",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241213-0005/",
          "https://go.dev/issue/59722",
          "https://pkg.go.dev/vuln/GO-2023-1753",
          "https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29400",
          "https://go.dev/cl/491617"
        ],
        "extended_information": {
          "short_description": "Insufficient filtering in Go's `html/template` leads to XSS when executing crafted templates.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published",
              "description": "Test code contains PoC that demonstrates code injection."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attackers must find a remote input that propagates into a Go template that is subsequently rendered with `Template.Execute` or `Template.ExecuteTemplate`. This is highly unlikely and is considered a bad practice regardless of this vulnerability.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-34156",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.22.7]",
              "[1.23.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-642402",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-34156",
          "https://pkg.go.dev/vuln/GO-2024-3106",
          "https://go.dev/issue/69139",
          "https://go.dev/cl/611239",
          "https://groups.google.com/g/golang-dev/c/S9POB9NCTdk"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang encoding/gob.Decoder.Decode leads to denial of service when decoding attacker-supplied Gob streams.",
          "full_description": "Golang supports an optimized encoder/decoder called \"gob\" for binary values exchanged between an Encoder (transmitter) and a Decoder (receiver). A typical use is transporting arguments and results of remote procedure calls (RPCs) such as those provided by package \"net/rpc\".\n\nIt was discovered that calling `Decoder.Decode` on a message which contains deeply nested structures can cause a panic due to stack exhaustion., which will crash the calling Go process.\n\nExample code snippet vulnerable to this issue-\n```go\ndec := NewDecoder(attacker_input)\ndec.Decode(\u0026output)\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into a `NewDecoder` API call (first argument). The built `Decoder` must then invoke the `Decode` call.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service."
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24531",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-138"
            ]
          }
        ],
        "summary": "Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making \"go env\" print them out.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.0-0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616757",
        "references": [
          "https://go.dev/issue/58508",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24531",
          "https://go.dev/cl/488375",
          "https://groups.google.com/g/golang-dev/c/ixHOFpSbajE/m/8EjlbKVWAwAJ",
          "https://pkg.go.dev/vuln/GO-2024-2962",
          "https://go.dev/cl/493535",
          "https://security.netapp.com/advisory/ntap-20250328-0005/"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-45341",
            "cvss_v3_score": "6.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cwe": [
              "CWE-295"
            ]
          }
        ],
        "summary": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain. Certificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.22.11]",
              "[1.23.5]",
              "[1.24.0-rc.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-668446",
        "references": [
          "https://security.netapp.com/advisory/ntap-20250221-0004/",
          "https://groups.google.com/g/golang-dev/c/CAWXhan3Jww/m/bk9LAa-lCgAJ",
          "https://groups.google.com/g/golang-dev/c/bG8cv1muIBM/m/G461hA6lCgAJ",
          "https://go.dev/issue/71156",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-45341",
          "https://pkg.go.dev/vuln/GO-2025-3373",
          "https://go.dev/cl/643099"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-39326",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cwe": [
              "NVD-CWE-noinfo",
              "CWE-400"
            ]
          }
        ],
        "summary": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.12]",
              "[1.21.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-540331",
        "references": [
          "https://go.dev/cl/547335",
          "https://go.dev/issue/64433",
          "https://pkg.go.dev/vuln/GO-2023-2382",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UIU6HOGV6RRIKWM57LOXQA75BGZSIH6G/",
          "https://groups.google.com/g/golang-dev/c/6ypN5EjibjM/m/KmLVYH_uAgAJ",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-39326"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2025-4674",
            "cvss_v3_score": "8.6",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
            "cwe": [
              "CWE-73"
            ]
          }
        ],
        "summary": "The go command may execute unexpected commands when operating in untrusted VCS repositories. This occurs when possibly dangerous VCS configuration is present in repositories. This can happen when a repository was fetched via one VCS (e.g. Git), but contains metadata for another VCS (e.g. Mercurial). Modules which are retrieved using the go command line, i.e. via \"go get\", are not affected.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.23.11]",
              "[1.24.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-712293",
        "references": [
          "https://go.dev/issue/74380",
          "https://groups.google.com/g/golang-announce/c/gTNJnDXmn34",
          "https://go.dev/cl/686515",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-4674",
          "https://pkg.go.dev/vuln/GO-2025-3828"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-2879",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-770"
            ]
          }
        ],
        "summary": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.18.7]",
              "[1.19.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-257610",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-2879",
          "https://pkg.go.dev/vuln/GO-2022-1037",
          "https://go.dev/cl/439355",
          "https://groups.google.com/g/golang-announce/c/xtuG5faxtaU",
          "https://security.gentoo.org/glsa/202311-09",
          "https://go.dev/issue/54853"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Golang archive/tar enables attackers to perform denial of service via a maliciously crafted tar archive.",
          "full_description": "Golang's [tar](https://pkg.go.dev/archive/tar) module provides access to reading and writing tar archives.\n\nIn the archive/tar module, the functions `Reader.parsePax`, and `Reader.next` do not limit the maximum size of file header's, which could cause an out of memory error when crafted files are parsed. \n\nAttackers can trigger the vulnerability by uploading a maliciously crafted tar archive with large headers, which subsequently needs to get processed via `tar.NewReader` and `Reader.Next`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker has to be able to upload tar archives which subsequently get processed via `tar.NewReader` and `Reader.Next`",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Test code contains a DoS PoC"
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is likely that Golang's tar module will be used to process untrusted tar archives"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45283",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-22",
              "CWE-41"
            ]
          }
        ],
        "summary": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.11]",
              "[1.20.12]",
              "[1.21.4]",
              "[1.21.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-535837",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45283",
          "https://go.dev/cl/540277",
          "http://www.openwall.com/lists/oss-security/2023/12/05/2",
          "https://go.dev/issue/64028",
          "https://go.dev/cl/541175",
          "https://go.dev/issue/63713",
          "https://pkg.go.dev/vuln/GO-2023-2185",
          "https://security.netapp.com/advisory/ntap-20231214-0008/",
          "https://groups.google.com/g/golang-dev/c/6ypN5EjibjM/m/KmLVYH_uAgAJ",
          "https://groups.google.com/g/golang-announce/c/4tU8LZfBFkY"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Golang allows attackers to perform path traversal when parsing Windows paths.",
          "full_description": "[Go](https://go.dev/) is an open source programming language that makes it easy to build simple, reliable, and efficient software.\nThe [`path/filepath`](https://pkg.go.dev/path/filepath) package of the Go programming language is used to parse and handle paths. This package takes into consideration the operating system.\nThe `Clean()` function in the  `path/filepath` package is used to clean up a given path and return a shorter, cleaned version of the path. \nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system.\n\nIt was discovered that when running Go applications on Windows, the `path/filepath` package does not recognize paths with a \\??\\ prefix as special. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fixing, `Clean()` could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. The vulnerability affects most of the functions of the `path/filepath` package, not just `Clean()`, this could lead to unexpected results when relying on the package, including path traversal which may lead to arbitrary file-read/file-write.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The security impact of exploiting this vulnerability highly depends on the 1st-party code that uses a `path/filepath` function.\nFor example, suppose the code uses `join()` to create an attacker-named externally writable file in the current directory. In that case, the attacker can create the file in an arbitrary file path, leading to arbitrary file overwrite.",
              "is_positive": true
            },
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development",
              "description": "The advisory contains an explanation of how to trigger the vulnerability."
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability as well as the impact.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "For the vulnerability to be exploitable, an attacker must find a remote service that takes user input and specifically opens a file after using a `path/filepath` package function, in which case the attacker may use it to open arbitrary files.",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The vulnerability only affects the Windows operating system.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nReplace any path usage of `\\??\\` with the equivalent `\\\\?\\` which is handled properly by `Clean` and other path-related APIs.\n\nFor example -\n```go\n\tmy_path := `\\??\\my\\path`\n\tsafe_path := strings.Replace(my_path, `\\??\\`, `\\\\?\\`, -1)\n\t# safe_path can be used with Clean() etc.\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24537",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-835",
              "CWE-190"
            ]
          }
        ],
        "summary": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.8]",
              "[1.20.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-513413",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241129-0004/",
          "https://go.dev/cl/482078",
          "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8",
          "https://security.gentoo.org/glsa/202311-09",
          "https://go.dev/issue/59180",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24537",
          "https://pkg.go.dev/vuln/GO-2023-1702"
        ],
        "extended_information": {
          "short_description": "An infinite loop in Go's parser package leads to denial of service when parsing crafted Go source code.",
          "full_description": "Go's [parser](https://pkg.go.dev/go/parser) package implements a parser for Go source files. Input may be provided in a variety of forms (see the various Parse* functions); the output is an abstract syntax tree (AST) representing the Go source. The parser is invoked through one of the Parse* functions.\n\nIt was discovered that a `//line` directive (used normally [for debugging purposes](https://www.lemoda.net/go/line-directives/index.html)) with a very large line number, can cause an integer overflow in the parser which results in an infinite loop denial of service.\n\nNote that the vulnerability can be triggered indirectly, for example via Go's [scanner](https://pkg.go.dev/go/scanner) package, or even by calling `go build` on untrusted source code.\n\nThat said, the vulnerability is less likely to affect runtime services, since Go source code parsing is mostly done at compile-time.\n\nMalicious source code example - \n```go\npackage p\n//line :9223372036854775806\n\n//\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "The DoS vulnerability is less likely to affect runtime services, since Go source code parsing is mostly done at compile-time. In the more likely case of the vulnerability affecting a command-line utility, the impact is less severe since it will lead to DoS of a forked non-server utility.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "A PoC that demonstrates DoS can be found in the fixing commit."
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attacker would need to cause crafted Go source code to be parsed directly by the `parser` package or indirectly by the `scanner` package (or by any command-line utility that calls either of the above packages, such as `go build`).",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-32189",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.13]",
              "[1.18.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248645",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-32189",
          "https://go.dev/cl/417774",
          "https://pkg.go.dev/vuln/GO-2022-0537",
          "https://go.dev/issue/53871",
          "https://go.googlesource.com/go/+/055113ef364337607e3e72ed7d48df67fde6fc66",
          "https://groups.google.com/g/golang-announce/c/YqYYG87xB10"
        ],
        "extended_information": {
          "short_description": "An out-of-bounds read in Go's math/big module leads to denial of service.",
          "full_description": "Go has a special module for big numbers: `math/big`. The `big` package implements arbitrary-precision arithmetic for signed integers, rational numbers and floating-point numbers.\n\nA crafted input can cause the `GobDecode` function to panic which leads to a denial of service.\n\nThe exploitation is trivial and a PoC has been published. The attacker must find a remote input that propagates into `Float.GobDecode()` or `Rat.GobDecode()` functions.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a remote input that propagates into the `Float.GobDecode()` or `Rat.GobDecode()` functions",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "The following code is enough to cause a denial of service: \n```\nFloat0 := big.NewFloat(0.0)\nFloat0.GobDecode([]byte{0x1, 0x0, 0x0, 0x0})\n```\nIt can be tested [here](https://go.dev/play/p/-iOX1cXown9)."
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-41771",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-119"
            ]
          }
        ],
        "summary": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.10]",
              "[1.17.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-189376",
        "references": [
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://go.dev/issue/48990",
          "https://go.dev/cl/367075",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ON7BQRRJZBOR5TJHURBAB3WLF4YXFC6Z/",
          "https://cert-portal.siemens.com/productcert/pdf/ssa-744259.pdf",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2021-41771",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4OFS3M3OFB24SWPTIAPARKGPUMQVUY6Z/",
          "https://lists.debian.org/debian-lts-announce/2022/01/msg00017.html",
          "https://security.gentoo.org/glsa/202208-02",
          "https://lists.debian.org/debian-lts-announce/2022/01/msg00016.html",
          "https://go.googlesource.com/go/+/61536ec03063b4951163bd09609c86d82631fa27",
          "https://pkg.go.dev/vuln/GO-2021-0263",
          "https://security.netapp.com/advisory/ntap-20211210-0003/",
          "https://groups.google.com/g/golang-announce/c/0fM21h43arc"
        ],
        "extended_information": {
          "short_description": "An out-of-bounds read in Go's `debug/macho` package may lead to a denial of service when processing a malformed Mach-O binary.",
          "full_description": "The [debug/macho](https://pkg.go.dev/debug/macho) package in Go provides functionality to parse and analyze Mach-O (Mach Object) files, which are executable binary files used primarily in macOS and iOS operating systems.\nThe dynamic symbol table command within a `Mach-O` binary provides information about symbols that are dynamically linked during runtime. It includes details such as symbol names, addresses, and other relevant attributes for runtime symbol resolution.\n\nWhen opening a `Mach-O` binary with Go's `debug/macho` package, the `NewFile()` method lacks proper validation of symbol table indexes, particularly the `undefined symbol index`.\n\nThis vulnerability arises during parsing of the `dynamic symbol table` command and can result in processing symbols outside the binary's memory range. Additionally, the package does not verify if the number of undefined symbols exceeds the symbol table's length.\nThese issues can lead to an out-of-bounds read and may potentially result in a panic and a denial of service.\n\nThe `NewFile()` method can be also accessed through the publicly exposed functions `Open()` and `OpenFat()` in the `debug/macho` package. These functions are commonly utilized to open and parse Mach-O binary files.\n\nHere's an example of vulnerable code that demonstrates the issue when using `Open()` or `OpenFat()` on a Mach-O binary:\n```go\nfunc openMachOBinary() {\n\tfile, err := macho.Open(\"vulnerable_binary\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n}\n```",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The `debug/macho` package is primarily intended for low-level analysis and manipulation of Mach-O binaries, the format used in Apple's operating system. As such, it is rarely used in production code and in server code.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "The PoC contains an example of a Mach-O binary causing panic."
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Panic for a client application is not a severe impact.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-29804",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-22"
            ]
          }
        ],
        "summary": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.11]",
              "[1.18.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248632",
        "references": [
          "https://go.googlesource.com/go/+/9cd1818a7d019c02fa4898b3e45a323e35033290",
          "https://pkg.go.dev/vuln/GO-2022-0533",
          "https://go.dev/issue/52476",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-29804",
          "https://go.dev/cl/401595",
          "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"
        ],
        "extended_information": {
          "short_description": "Invalid input validation in Golang filepath.Clean may lead to filter bypass when cleaning crafted filepaths on Windows.",
          "full_description": "Golang's [filepath.Clean](https://pkg.go.dev/path/filepath#Clean) method returns the shortest path name **equivalent** to the input path by purely lexical processing.\n\nIt was discovered that on Windows, the method transformed some invalid filepaths into valid unexpected filepaths, specifically - \n```go\nfilepath.Clean(`.\\c:`)     // `c:`     Input is an invalid path; Output points to drive C\nfilepath.Clean(`.\\c:\\foo`) // `c:\\foo` Input is an invalid path; Output is an absolute path\nfilepath.Clean(`.\\c:foo`)  // `c:foo`  Input points to ADS `foo` of file `.\\c`; Output points to `foo` on drive C\n```\n\nThe original advisory contained a severe implication of this issue, where starting an HTTP server based on the \"net/http\" module, which is supposed to be restricted to the current directory, would actually serve files from any absolute path - \n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() {\n\thttp.ListenAndServe(\":8080\", http.FileServer(http.Dir(\".\")))\n}\n```\nRequesting `http://localhost:8080/c:/Users/` lists the directory contents of `C:\\Users\\`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker simply needs to supply a string prefixed with `.\\c:` to `filepath.Clean`"
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The impact highly depends on how the attacker-controlled path is used after it's been cleaned. An attacker can supply an invalid path which would be transformed into either a drive letter, an absolute path or an ADS (alternate data stream)",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into the `filepath.Clean` method",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24534",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400"
            ]
          }
        ],
        "summary": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.8]",
              "[1.20.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-513415",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24534",
          "https://security.gentoo.org/glsa/202311-09",
          "https://go.dev/cl/481994",
          "https://pkg.go.dev/vuln/GO-2023-1704",
          "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8",
          "https://security.netapp.com/advisory/ntap-20230526-0007/",
          "https://go.dev/issue/58975"
        ],
        "extended_information": {
          "short_description": "Improper MIME header parsing in Go's `net/textproto` package can lead to memory exhaustion and denial of service when processing a crafted header.",
          "full_description": "`net/textproto` is a Go standard library package that offers functionality for parsing and serializing textual protocols used in network communications, such as HTTP, SMTP, NNTP, and FTP, by providing methods for reading and writing lines, headers, and MIME-style messages in a way that handles common protocol-specific quirks and variations.\nA vulnerability was identified in the `ReadMIMEHeader()` function within the `net/textproto` package, whereby certain input data patterns (large amounts of LF characters) can cause the function to allocate an excessive amount of memory. For instance, a header with a large number of newline characters may cause the function to over-allocate memory, resulting in memory exhaustion and a denial of service. Attackers could exploit this vulnerability by crafting small requests, making it a relatively easy target for malicious activity.\n\nThis issue is dangerous since even a very simple Go HTTP server is remotely vulnerable to DoS.\n\nVulnerable code example -\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc hello(w http.ResponseWriter, req *http.Request) {\n    fmt.Fprintf(w, \"hello\\n\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", hello)\n    http.ListenAndServe(\":80\", nil)\n}\n```",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "Go HTTP servers (with no special configurations) are vulnerable to this attack remotely"
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker can easily craft a request with a significant amount of newline characters in any MIME header in order to trigger the issue."
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This issue leads to memory exhaustion and potential denial of service of the HTTP server"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nDefine a `systemd service` and limit the memory available to the application. It will prevent it from crashing the host system.\nTo do that, create a `.service` file in the `/etc/systemd/system/` directory and fill it in following the template given here:\n```\n[Unit]\nDescription = My HTTP server\nRequires    = my_http_app.socket\nAfter       = multi-user.target\n\n[Service]\nUser                         = www-user\nGroup                      = www-user\nWorkingDirectory  = /var/my_http_server\nExecStart                = /var/my_http_server/bin/my-server\nExecReload            = /bin/kill -HUP $MAINPID\nRestart                    = always\nNotifyAccess         = main\nKillMode                 = process\nNonBlocking          = true\nMemoryMax           = 20G\n```\nwith the according socket file (`my_http_app.socket`):\n```\n[Unit]\nDescription=My HTTP server socket\n\n[Socket]\nListenStream = 80\nBindIPv6Only = both\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-23772",
            "cvss_v2_score": "7.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:C",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-190"
            ]
          }
        ],
        "summary": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.14]",
              "[1.17.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-197973",
        "references": [
          "https://lists.debian.org/debian-lts-announce/2022/04/msg00018.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20220225-0006/",
          "https://go.dev/issue/50699",
          "https://security.gentoo.org/glsa/202208-02",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-23772",
          "https://groups.google.com/g/golang-announce/c/SUsQn0aSgPQ",
          "https://pkg.go.dev/vuln/GO-2021-0317",
          "https://go.googlesource.com/go/+/ad345c265916bbf6c646865e4642eafce6d39e78",
          "https://go.dev/cl/379537",
          "https://lists.debian.org/debian-lts-announce/2022/04/msg00017.html"
        ],
        "extended_information": {
          "short_description": "Unhandled overflow in Go's `math/big` package can lead to memory exhaustion when unmarshalling a string into a `Rat` with a crafted string using a base 10 exponent.",
          "full_description": "The [math/big](https://pkg.go.dev/math/big) Go package provides arbitrary-precision arithmetic for integers, rational numbers, and floating-point numbers.\nWhen using the `Rat.SetString()` method in the `math/big` Go package to convert a `string` into a `Rat` object representing rational numbers, a crafted decimal floating-point number in the input string can cause memory exhaustion. \n\nFor example, the string `13e-9223372036854775808` contains a base 10 exponent value that is the minimum possible value for a 64-bit signed integer (-2^63). In this case, the `SetString` method does not filter or limit the overflow of the exponent value when the exponent is negative. Consequently, it is converted to an unsigned integer, which can trigger a sizeable exponential operation during the conversion process.\n\nExample of vulnerable code:\n```go\nfunc ParseFloatStringToRat(floatStr string) (*big.Rat, error) {\n\tr := big.NewRat(1, 1)\n\tif _, ok := r.SetString(floatStr); !ok {\n\t\treturn nil, fmt.Errorf(\"failed to parse the string!\")\n\t}\n\n\treturn r, nil\n}\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "It is unlikely that unsanitized user input will be supplied to the `Rat.SetString()` function.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attackers must find a remote input that propagates to the `Rat.SetString()` method of the Go's math/big package.",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An example of a decimal floating point in a string is given in the unit-test: `13e-9223372036854775808`."
            }
          ],
          "remediation": "##### Development mitigations\n\nSanitize user input by enforcing a minimum integer before calling `Rat.SetString()` :\n```\nfunc containsBadMinInt64(s string) bool {\n\tconst minInt64 = \"-9223372036854775808\"\n\treturn strings.Contains(s, minInt64)\n}\n```\nThis function returns `True` if the input string contains the minimal signed integer number that can cause the memory exhaustion."
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45284",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cwe": [
              "CWE-41",
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.11]",
              "[1.21.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-535836",
        "references": [
          "https://go.dev/cl/540277",
          "https://go.dev/issue/63713",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45284",
          "https://pkg.go.dev/vuln/GO-2023-2186",
          "https://groups.google.com/g/golang-announce/c/4tU8LZfBFkY"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2025-47907",
            "cvss_v3_score": "7.0",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L",
            "cwe": [
              "CWE-362"
            ]
          }
        ],
        "summary": "Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.23.12]",
              "[1.24.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-713818",
        "references": [
          "https://groups.google.com/g/golang-announce/c/x5MKroML2yM",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-47907",
          "https://pkg.go.dev/vuln/GO-2025-3849",
          "https://go.dev/cl/693735",
          "https://go.dev/issue/74831"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-39323",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.9]",
              "[1.21.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-533052",
        "references": [
          "https://pkg.go.dev/vuln/GO-2023-2095",
          "https://groups.google.com/g/golang-announce/c/XBa1oHDevAo",
          "https://go.dev/cl/533215",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KSEGD2IWKNUO3DWY4KQGUQM5BISRWHQE/",
          "https://go.dev/issue/63211",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/CLB4TW7KALB3EEQWNWCN7OUIWWVWWCG2/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XFOIBB4YFICHDM7IBOP7PWXW3FX4HLL2/",
          "https://security.gentoo.org/glsa/202311-09",
          "https://security.netapp.com/advisory/ntap-20231020-0001/",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-39323"
        ],
        "extended_information": {
          "short_description": "A design problem in Golang's go command leads to arbitrary code execution when building crafted Go source code.",
          "full_description": "Compiler directives are statements written in the source code that give the programmer the ability to control the compiler's behavior. Golang compiler accepts compiler directives as comments (using `//` single line and `/*` multi-line comments). \n\nA [line directive](https://pkg.go.dev/cmd/compile#hdr-Compiler_Directives) specifies the source position for the character immediately following the comment as having come from the specified file. The following example specifies that the filename is foo.go and the line number is 10 for the next line in the source code.\n\n`//line foo.go:10` \n\nThe `cgo` package lets Go packages call C code and combines c files and go files into a single Go package. The cgo directives are used to provide flags for the compiler and linker when building the C parts of the package. For security reasons (may lead to code execution), the Golang command restricts the use of `cgo` directives (`//go:cgo_`) unless the file is generated by cgo.\n\nThe Golang compiler has a design problem in the implementation of the `isCgoGeneratedFile()` function, which leads to cgo directives restrictions being bypassed when handling crafted line directives followed by cgo directives. This function's purpose is to determine whether a file was generated by cgo or not, tricking this function is the key to bypassing the compiler restrictions. The following combination tricks the compiler into handling cgo directives as it is part of cgo-generated code (`_cgo_` prefix) although it is not.\n\n```\n//line /tmp/_cgo_.go:1\n//go:cgo_dynamic_linker \"/elf/interp\"\n```\n\nUsing the directives above tricks the compiler to use restricted cgo directives, which can lead to arbitrary code execution when running the `go build` command on the manipulated source code.\n\nThe line directive requires the absolute path of the file in which the directive lives, which can make exploiting this issue more complex (may require per-target research).\n\nThe official fix solves this issue by correcting the implementation of the `isCgoGeneratedFile()` function to find the real position of a statement (not the position specified by the line directive).",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC"
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Arbitrary code execution"
            },
            {
              "name": "Exploiting the issue requires the user to interact with the vulnerable software",
              "description": "The victim must explicitly build malicious or tampered source code (ex. by running `go build`)",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attacker must be able to write the contents of a Go source code file (that will be compiled using the Go command) to exploit this issue, which is unlikely.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nDisable \"cgo\" support by running the go tool with CGO_ENABLED=0 -\n`CGO_ENABLED=0 go build .`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-2880",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-444"
            ]
          }
        ],
        "summary": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.18.7]",
              "[1.19.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-257609",
        "references": [
          "https://security.gentoo.org/glsa/202311-09",
          "https://groups.google.com/g/golang-announce/c/xtuG5faxtaU",
          "https://go.dev/issue/54663",
          "https://go.dev/cl/432976",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-2880",
          "https://pkg.go.dev/vuln/GO-2022-1038"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Golang net/http/httputil and net/url may enable attackers to perform filter bypass \u0026 parameter smuggling.",
          "full_description": "Golang's [net/http/httputil](https://pkg.go.dev/net/http/httputil) package provides HTTP utility functions, complementing the ones in Golang's net/http package.\n\nGolang's [net/http](https://pkg.go.dev/net/http) package provides HTTP client and server implementations in Golang.\n\nGolang's [net/url](https://pkg.go.dev/net/url) package is used for parsing URLs and query escaping.\n\nIn Go 1.17, URL parsing was changed to reject keys containing a semicolon. But despite the function `net/url.ParseQuery` being changed to raise an error when given a parameter with `;`, the function `net/url.URL.Query`, which calls the `net/url.ParseQuery`, ignores any error returned by it. Furthermore, the function `net/http/httputils.NewSingleHostReverseProxy` does not parse the query at all and sends the raw query to the backend.\n\nThis means that when there's a version discrepancy between the frontend and the backend - where the frontend uses a Go 1.17 or later, and the backend uses Go 1.16.x or earlier - it is possible for attackers to use parameter smuggling in order to bypass possible filters.\n\nTake for example the fictional website `https://mysite`, which uses Go 1.18 for its frontend and Go 1.16 for its backend. When going to `https://mysite/home`, the user's name is added as a parameter, e.g.  `https://mysite/home?name=sam`. In addition to the `name` parameter, it is possible to add a `role` parameter, which can be set to either `user` or `admin`. When the parameter is set to `admin` the frontend checks whether the user's name is that of an admin or not before forwarding the query to the backend.\n\nHowever,  when an attacker sends a request such as `https://mysite/home?role=admin;\u0026name=regularuser`, and the frontend parses it using `net/url.URL.Query`, the function will only return the `name=regularuser` parameter and raise no error. Since the frontend deems the request valid, it will pass it to the backend using `net/http/httputils.NewSingleHostReverseProxy`, which will pass the raw query instead of the parsed query from `net/url.URL.Query` to the backend. When the backend parses the query, both `name=regularuser` and `role=admin` will be returned. Thus, the attacker bypassed the frontend's filter.\n\nThe vulnerability does not exist if the frontend and the backend both use Go before 1.17 or Go after 1.17.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "A simple addition of the `;` character to a vulnerable parameter can lead to successful exploitation.\nThere are several exploitation examples of this issue online and it is trivial to create a new one when a vulnerable application is found."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "- The attacker has to know that the frontend/proxy and backend of the target both use Golang, and that the frontend/proxy use Go 1.17 or later, while the backend uses an earlier version of Go (before 1.17).\n- They also need to know that there isn't any additional sanitization on the URL before parsing the query or sending it to the backend through the proxy.\n- The attacker should find a vulnerable parameter that can be exploited with a meaningful applicative impact.",
              "is_positive": true
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The impact of the vulnerability depends on the parameters that can be given to the URL and their effects.",
              "is_positive": true
            },
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development"
            }
          ],
          "remediation": "##### Development mitigations\n\nUse `net/url.ParseQuery` instead of `net/url.URL.Query`, and check for errors returned by it."
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-24675",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.9]",
              "[1.18.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-208841",
        "references": [
          "https://groups.google.com/g/golang-announce",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/F3BMW5QGX53CMIJIZWKXFKBJX2C5GWTY/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZY2SLWOQR4ZURQ7UBRZ7JIX6H6F5JHJR/",
          "https://go.dev/cl/399820",
          "https://cert-portal.siemens.com/productcert/pdf/ssa-744259.pdf",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/42TYZC4OAY54TO75FBEFAPV5G7O4D5TM/",
          "https://security.netapp.com/advisory/ntap-20220915-0010/",
          "https://security.gentoo.org/glsa/202208-02",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Z55VUVGO7E5PJFXIOVAY373NZRHBNCI5/",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-24675",
          "https://pkg.go.dev/vuln/GO-2022-0433",
          "https://go.dev/issue/51853",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RCRSABD6CUDIZULZPZL5BJ3ET3A2NEJP/",
          "https://go.googlesource.com/go/+/45c3387d777caf28f4b992ad9a6216e3085bb8fe",
          "https://groups.google.com/g/golang-announce/c/oecdBNLOml8",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RQXU752ALW53OJAF5MG3WMR5CCZVLWW6/"
        ],
        "extended_information": {
          "short_description": "A stack exhaustion in Golang when decoding PEM data leads to denial of service.",
          "full_description": "[Go](https://go.dev/) is a statically typed, compiled programming language designed at Google. It is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency. It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.\n\nGo offers multiple built-in packages. One of them is [PEM package](https://pkg.go.dev/encoding/pem), responsible for encoding and decoding PEM data like TLS keys or certificates. \n\nThe PEM's data decoding can be compromised to cause a stack overflow/exhaustion and thus, a denial of service. The bug was proven to be triggered when decoding a large PEM data containing errors. Errors were triggering a recursive call the `Decode` function itself. Recursive calls fill up the calling stack until the crash. \n\nThe bug was fixed in Go version 1.18.1 and 1.17.9. A proof-of-concept was [published](https://go-review.googlesource.com/c/go/+/399820/1/src/encoding/pem/pem_test.go#164) as a test case.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a remote input that propagates into a PEM `Decode` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "Network software tends to decode PEM data from untrusted sources (ex. SSL certificates)"
            },
            {
              "name": "The issue has multiple mentions in general media"
            },
            {
              "name": "The issue has an exploit published",
              "description": "Crashing PoC test case"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-34155",
            "cvss_v3_score": "4.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.22.7]",
              "[1.23.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-642406",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-34155",
          "https://pkg.go.dev/vuln/GO-2024-3105",
          "https://groups.google.com/g/golang-dev/c/S9POB9NCTdk",
          "https://go.dev/cl/611238",
          "https://go.dev/issue/69138"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-24921",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.15]",
              "[1.17.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-199345",
        "references": [
          "https://go.dev/cl/384616",
          "https://lists.debian.org/debian-lts-announce/2022/04/msg00018.html",
          "https://security.netapp.com/advisory/ntap-20220325-0010/",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-24921",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00021.html",
          "https://security.gentoo.org/glsa/202208-02",
          "https://go.googlesource.com/go/+/452f24ae94f38afa3704d4361d91d51218405c0a",
          "https://groups.google.com/g/golang-announce/c/RP1hfrBYVuk",
          "https://pkg.go.dev/vuln/GO-2021-0347",
          "https://cert-portal.siemens.com/productcert/pdf/ssa-744259.pdf",
          "https://lists.debian.org/debian-lts-announce/2022/04/msg00017.html",
          "https://go.dev/issue/51112"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41724",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400"
            ]
          }
        ],
        "summary": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.6]",
              "[1.20.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-426748",
        "references": [
          "https://security.gentoo.org/glsa/202311-09",
          "https://pkg.go.dev/vuln/GO-2023-1570",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41724",
          "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E",
          "https://go.dev/cl/468125",
          "https://go.dev/issue/58001"
        ],
        "extended_information": {
          "short_description": "Improper error management in Go's crypto/tls package can lead to denial of service when processing large TLS handshake records.",
          "full_description": "The `crypto/tls` package in Go provides cryptographic protocols for secure communication over the network, including the Transport Layer Security (TLS) protocol.\nImproper error management when processing a large TLS handshake record can lead to panic when attempting to construct responses. \n\nA large TLS handshake can be generated by TLS 1.3 clients and TLS 1.2 clients with session resumption enabled, when the `Config.ClientSessionCache` setting has a non-nil value. In addition, a large TLS handshake can also be generated by TLS 1.3 servers when client authentication is enabled (`Config.ClientAuth` is set to `RequestClientCert` or a higher value).\n\nAlthough internal library code is vulnerable to this issue, currently it does not seem this issue can be triggered by an external attacker.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS score does not reflect the real-world impact of the issue, since the issue cannot be exploited by an external attacker",
              "is_positive": true
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Although internal library code is vulnerable to this issue, currently it does not seem this issue can be triggered by an external attacker.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41722",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-22"
            ]
          }
        ],
        "summary": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.6]",
              "[1.20.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-426750",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41722",
          "https://go.dev/issue/57274",
          "https://pkg.go.dev/vuln/GO-2023-1568",
          "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E",
          "https://go.dev/cl/468123"
        ],
        "extended_information": {
          "short_description": "Improper error handling in Go leads to unexpected results from the Clean function.",
          "full_description": "The `Clean()` function in the  [`path/filepath`](https://pkg.go.dev/path/filepath) package of the Go programming language is used to clean up a given path and return a shorter, cleaned version of the path. This function takes into consideration the operating system and is capable of transforming a Unix path to a Windows path if needed.\n\nIt was discovered that when running Go applications on Windows (only), if the input path to `Clean` contains the `:` operator, the function can form a valid Windows path from this operator alone. For example, calling `Clean(\"a/../c:/b\")` will erroneously transform the input path into `c:\\b`. Due to these unexpected results, in certain cases, the use of this function can lead to path traversal or filter bypass issues.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The specific security impact of this issue depends on the way that the input for `Clean` is checked AND used after the call to `Clean`. For example, if the input is validated to not point to `C:\\` before calling `Clean`, then an attacker can bypass this validation by calling `Clean(\"a/../c:/b\")` which doesn't start with `C:\\` but will result in the output path `c:\\b` after cleaning",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find an input that propagates to the `Clean()` function",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "It is easy to craft an invalid path for `Clean` that will result in a valid, unexpected output path"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29405",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-88",
              "CWE-74"
            ]
          }
        ],
        "summary": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.10]",
              "[1.20.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-521541",
        "references": [
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NZ2O6YCO2IZMZJELQGZYR2WAUNEDLYV6/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XBS3IIK6ADV24C5ULQU55QLT2UE762ZX/",
          "https://security.gentoo.org/glsa/202311-09",
          "https://go.dev/issue/60306",
          "https://security.netapp.com/advisory/ntap-20241206-0003/",
          "https://go.dev/cl/501224",
          "https://groups.google.com/g/golang-announce/c/q5135a9d924/m/j0ZoAJOHAwAJ",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29405",
          "https://pkg.go.dev/vuln/GO-2023-1842"
        ],
        "extended_information": {
          "short_description": "Insufficient validation in Go's linker leads to build-time code execution when compiling untrusted source code.",
          "full_description": "Go supports compiling \"cgo\" binaries, which allow Go code to call C code.\nAs part of \"cgo\" support, Go source code files can supply flags to the GCC compiler and linker by using the `#cgo CFLAGS` and `#cgo LDFLAGS` directives, respectively.\nSince some GCC flags can directly lead to unwanted code execution in build time (for example the `-wrapper` flag) the Go compiler maintains a whitelist of allowed GCC flags.\n\nIt was discovered that arbitrary GCC flags can be smuggled to the build process, through the `#cgo LDFLAGS` directive.\nFor example, building the following code will smuggle the `--nosuchoption` flag into the build process -\n```go\npackage main\n// #cgo LDFLAGS: -L \"./ -Wl,--nosuchoption\"\nimport \"C\"\nfunc main() {}\n```\n\nAttackers can exploit this issue by making victims compile untrusted Go code (ex. with `go build` or `go get`). Arbitrary code execution will happen as soon as the untrusted Go code is built.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Code execution"
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published exploit demonstrates arbitrary flag injection"
            },
            {
              "name": "Exploiting the issue requires the user to interact with the vulnerable software",
              "description": "A user must compile untrusted Go code in order to trigger the vulnerability",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nDisable \"cgo\" support by running the `go` tool with `CGO_ENABLED=0` -\n```bash\nCGO_ENABLED=0 go build .\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24783",
            "cvss_v3_score": "5.9",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-476"
            ]
          }
        ],
        "summary": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic. This affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.8]",
              "[1.22.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616744",
        "references": [
          "https://go.dev/issue/65390",
          "https://go.dev/cl/569339",
          "https://security.netapp.com/advisory/ntap-20240329-0005/",
          "http://www.openwall.com/lists/oss-security/2024/03/08/4",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24783",
          "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg",
          "https://pkg.go.dev/vuln/GO-2024-2598"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29403",
            "cvss_v3_score": "7.8",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-642",
              "CWE-668"
            ]
          }
        ],
        "summary": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.10]",
              "[1.20.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-521543",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241220-0009/",
          "https://pkg.go.dev/vuln/GO-2023-1840",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XBS3IIK6ADV24C5ULQU55QLT2UE762ZX/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NZ2O6YCO2IZMZJELQGZYR2WAUNEDLYV6/",
          "https://go.dev/cl/501223",
          "https://go.dev/issue/60272",
          "https://groups.google.com/g/golang-announce/c/q5135a9d924/m/j0ZoAJOHAwAJ",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29403",
          "https://security.gentoo.org/glsa/202311-09"
        ],
        "extended_information": {
          "short_description": "Incorrect error handling in the Go runtime allows local attackers to cause data leakage when SUID Go binaries are executed.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "Attackers must cause a setuid/setgid Go executable to crash"
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The impact depends on the Go application being run.\nIf the standard file descriptors are closed while running the Go application, an attacker can exploit the issue to read/write arbitrary files.\nIn the case of a crash of the Go application, a memory dump of the crash could result in data leakage.",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not take into account the high attack complexity and per-target research needed to exploit this issue.",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "Exploitation relies on the Go application binary having the `setuid`/`setgid` bits set. Moreover, the only scenarios found exploitable are when the standard file descriptors (`stdin`/`stdout`/`stderr`) are closed or when a memory dump occurs, which are highly unlikely.",
              "is_positive": true
            },
            {
              "name": "The issue can only be exploited by an attacker that can execute code on the vulnerable machine (excluding exceedingly rare circumstances)",
              "description": "The data leakage caused by crashing a setuid/setgid Go executable is very likely to be visible to local attackers exclusively",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2025-0913",
            "cvss_v3_score": "5.5",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-59"
            ]
          }
        ],
        "summary": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.23.10]",
              "[1.24.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-704403",
        "references": [
          "https://go.dev/cl/672396",
          "https://go.dev/issue/73702",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-0913",
          "https://pkg.go.dev/vuln/GO-2025-3750",
          "https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-23806",
            "cvss_v2_score": "6.4",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:P/A:P",
            "cvss_v3_score": "9.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cwe": [
              "CWE-252"
            ]
          }
        ],
        "summary": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.14]",
              "[1.17.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-198036",
        "references": [
          "https://go.dev/issue/50974",
          "https://go.dev/cl/382455",
          "https://lists.debian.org/debian-lts-announce/2022/04/msg00018.html",
          "https://go.googlesource.com/go/+/7f9494c277a471f6f47f4af3036285c0b1419816",
          "https://pkg.go.dev/vuln/GO-2021-0319",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-23806",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00021.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20220225-0006/",
          "https://lists.debian.org/debian-lts-announce/2022/04/msg00017.html",
          "https://security.gentoo.org/glsa/202208-02",
          "https://groups.google.com/g/golang-announce/c/SUsQn0aSgPQ"
        ],
        "extended_information": {
          "short_description": "Improper argument validation in the `IsOnCurve()` function of Go's `crypto/elliptic` package can cause it to return wrong results.",
          "full_description": "The [crypto/elliptic](https://pkg.go.dev/crypto/elliptic) is a library that provides cryptographic operations for elliptic curve cryptography in the Go programming language. It is a standard package included in the Go standard library and is widely used in the development of secure applications that rely on elliptic curve cryptography.\n`Curve.IsOnCurve()` is a method provided by the `crypto/elliptic` Go package, which is used to verify that a given point is on a specific elliptic curve. This method plays a critical role in ensuring the accuracy of points used in various cryptographic operations, including digital signatures and key exchange.\n\nThe `crypto/elliptic` library implements elliptic curves on finite fields with prime orders. In this context, the coordinates used are elements of a field that consists of integers ranging from zero to P-1, where P is a prime number. It's important to note that coordinates below zero (negative) or equal to or greater than P (overflowing) are not valid coordinates.\n\nWhen invalid integer inputs, such as negative or overflowing big integers are passed to `Curve.IsOnCurve()`, it may incorrectly return `true` instead of `false`. To avoid passing invalid inputs, it is a standard practice to validate field elements using `Curve.IsOnCurve()` before using them in other functions. This is because the `Curve.IsOnCurve()` function's false return value is critical for the correct execution of the `ScalarMult()` and `Marshal()` functions.\n\nFailing to validate the field elements may cause these functions to panic due to inaccurate results.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published",
              "description": "A PoC shows that the function `IsOnCurve()` produces a true result instead of the intended false result, then later causes a panic in the `scalarMult()` function."
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "Since it typically serves as the parameter-checking function, the arguments passed to it are usually forwarded directly to the vulnerable function."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attackers should find a remote input that propagates into the `Curve.IsOnCurve()` function, then later is used to call the `ScalarMult()` or `Marshal()` functions.",
              "is_positive": true
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The vulnerable function `Curve.IsOnCurve()` is used internally but can also be used externally. \nIf there is a subsequent function call to either the `ScalarMult()` or `Marshal()` functions, the application could panic, resulting in a denial of service.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nFor the manual call to `Curve.IsOnCurve()`, add the following check before the call to the function:\n```\nif x.Sign() \u003c 0 || x.Cmp(curve.P) \u003e= 0 ||\n    y.Sign() \u003c 0 || y.Cmp(curve.P) \u003e= 0 {\n    return nil, fmt.Errorf(\"Point is not on the curve\")\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-44717",
            "cvss_v2_score": "5.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:N",
            "cvss_v3_score": "4.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
            "cwe": [
              "CWE-404"
            ]
          }
        ],
        "summary": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.12]",
              "[1.17.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-193494",
        "references": [
          "https://go.dev/cl/370795",
          "https://lists.debian.org/debian-lts-announce/2022/01/msg00016.html",
          "https://go.googlesource.com/go/+/a76511f3a40ea69ee4f5cd86e735e1c8a84f0aa2",
          "https://go.dev/cl/370576",
          "https://go.dev/issue/50057",
          "https://lists.debian.org/debian-lts-announce/2022/01/msg00017.html",
          "https://security.gentoo.org/glsa/202208-02",
          "https://groups.google.com/g/golang-announce/c/hcmEScgc00k",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00021.html",
          "https://pkg.go.dev/vuln/GO-2022-0289",
          "https://nvd.nist.gov/vuln/detail/CVE-2021-44717",
          "https://cert-portal.siemens.com/productcert/pdf/ssa-744259.pdf",
          "https://go.dev/cl/370577"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30631",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248648",
        "references": [
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://go.dev/cl/417067",
          "https://go.googlesource.com/go/+/b2b8872c876201eac2d0707276c6999ff3eb185e",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30631",
          "https://go.dev/issue/53168",
          "https://pkg.go.dev/vuln/GO-2022-0524"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang compress/gzip.Reader.Read leads to denial of service when processing attacker-supplied gzip archives.",
          "full_description": "Golang provides the [compress/gzip](https://pkg.go.dev/compress/gzip) package in order to compress and decompress GZIP archives.\n\nIt was discovered that calling `Reader.Read` on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion, which will crash the calling Go process.\n\nExample code snippet that is vulnerable to this issue -\n```go\nr := bytes.NewReader(attacker_input)\nz, err := NewReader(r)\n_, err = z.Read(make([]byte, 10)) // Specific arguments here are irrelevant\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The target program must decompress an attacker-supplied gzip archive. More specifically - the attacker must find remote input that propagates into a `compress/gzip.Reader.Read` API call.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-38297",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-120"
            ]
          }
        ],
        "summary": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.9]",
              "[1.17.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-187759",
        "references": [
          "https://security.gentoo.org/glsa/202208-02",
          "https://groups.google.com/forum/#%21forum/golang-announce",
          "https://security.netapp.com/advisory/ntap-20211118-0006/",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00021.html",
          "https://go.googlesource.com/go/+/77f2750f4398990eed972186706f160631d7dae4",
          "https://nvd.nist.gov/vuln/detail/CVE-2021-38297",
          "https://go.dev/cl/354571",
          "https://go.dev/issue/48797",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4OFS3M3OFB24SWPTIAPARKGPUMQVUY6Z/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ON7BQRRJZBOR5TJHURBAB3WLF4YXFC6Z/",
          "https://pkg.go.dev/vuln/GO-2022-0247",
          "https://groups.google.com/g/golang-announce/c/AEBu9j7yj5A"
        ],
        "extended_information": {
          "short_description": "A buffer overflow in Go's Wasm module could lead to sandboxed remote code execution when parsing malicious command line arguments.",
          "full_description": "[Go](https://golang.org/) is an open source programming language developed by Google with the same syntax of C language but with memory safety, garbage collection, structural typing, and CSP-style concurrency.\n\nA bug was found in the way Go handles function invocation from Wasm module. In case the user builds a Wasm module in Go - \n```\nGOOS=js GOARCH=wasm go build -o main.wasm  \n```\n\nAnd subsequently loads the Wasm module in the browser, **while passing arguments to it** -\n```js\n\u003cscript\u003e\n        const params = new URLSearchParams(window.location.search)\n        const go = new Go();\n        WebAssembly.instantiateStreaming(fetch(\"main.wasm\"), go.importObject).then((result) =\u003e {\n            go.argv = ['js', 'foo', params.get('external_argument')];\n            go.run(result.instance);\n        });\n\u003c/script\u003e\n```\nIf an attacker can control one of the parameters passed to `go.argv` and subsequently cause the entire command line (`argv`) to exceed 4096 characters, then an attacker-controlled buffer overflow will occur. The attacker can use this buffer overflow to replace the entire contents if the compiled Wasm module and achieve arbitrary code execution in the browser's JavaScript (Wasm) sandbox.\n\nIn the example above, since `external_argument` comes from a query parameter, this would be achieved by surfing to a URL such as -\n`https://test.com/?external_argument=AAAAAA...{repeat 4096 times}...`\n\nCurrently, no public exploit or technical writeup were published for this issue.\n\nThe impact of exploiting the issue is not severe, since the attacker's code will run in the browser's JavaScript (Wasm) sandbox. This means the impact is the same as loading an attacker-controlled Wasm module, or alternatively the same impact as an XSS attack on the vulnerable web page. For example - page cookies can be stolen, but arbitrary code execution cannot be directly achieved.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker can use the buffer overflow to overwrite the entire Wasm module with an attacker-supplied Wasm module"
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Even if RCE is achieved, the impact is similar to an XSS attack, since the attacker's code runs inside the browser's JavaScript sandbox",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The vulnerable web page must load a Go Wasm module (`go.run(result.instance)`), and use an attacker-controlled parameter as one of the arguments in `go.argv`",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nWhen running the Wasm binary - check that the total length of `go.argv` is smaller than 4k -\n\n```js\nconst maxSize = 4096;\nfunction checkWasmCmd(arr) {\n    var len = arr.reduce(\n        (cur, elem) =\u003e {\n            //pad each element to 8 bytes\n            return cur + elem.length + (8 - (elem.length % 8))\n        }, 0\n    );\n    \n    if (len \u003c= maxSize) {\n        return true;\n    }\n    return false;\n}\n\nfunction runWasm(wasmPath, args) {\n    var go = new Go();\n    WebAssembly.instantiateStreaming(fetch(wasmPath), go.importObject).then((result) =\u003e {\n        go.argv = go.argv.concat(args);\n        if (checkWasmCmd(go.argv)) {\n            go.run(result.instance);\n        } else {\n            console.log('Failed to run Wasm binary: command line is too long');\n        }\n    });\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29404",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-94"
            ]
          }
        ],
        "summary": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.10]",
              "[1.20.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-521542",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241115-0009/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NZ2O6YCO2IZMZJELQGZYR2WAUNEDLYV6/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XBS3IIK6ADV24C5ULQU55QLT2UE762ZX/",
          "https://groups.google.com/g/golang-announce/c/q5135a9d924/m/j0ZoAJOHAwAJ",
          "https://go.dev/cl/501225",
          "https://pkg.go.dev/vuln/GO-2023-1841",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29404",
          "https://security.gentoo.org/glsa/202311-09",
          "https://go.dev/issue/60305"
        ],
        "extended_information": {
          "short_description": "Insufficient validation in Go's linker leads to build-time code execution when compiling untrusted source code.",
          "full_description": "Go supports compiling \"cgo\" binaries, which allow Go code to call C code.\nAs part of \"cgo\" support, Go source code files can supply flags to the GCC compiler and linker by using the `#cgo CFLAGS` and `#cgo LDFLAGS` directives, respectively.\nSince some GCC flags can directly lead to unwanted code execution in build time (for example the `-wrapper` flag) the Go compiler maintains a whitelist of allowed GCC flags.\n\nIt was discovered that arbitrary GCC flags can be smuggled to the build process, through the `#cgo LDFLAGS` directive.\nFor example, building the following code will smuggle the `-bad-flag` flag into the build process -\n```go\npackage main\n// #cgo LDFLAGS: -L \"-Wl,-O -Wl,-R,-bad-flag\"\nimport \"C\"\nfunc main() {}\n```\n\nAttackers can exploit this issue by making victims compile untrusted Go code (ex. with `go build` or `go get`). Arbitrary code execution will happen as soon as the untrusted Go code is built.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Code execution"
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published exploit demonstrates arbitrary flag injection"
            },
            {
              "name": "Exploiting the issue requires the user to interact with the vulnerable software",
              "description": "A user must compile untrusted Go code in order to trigger the vulnerability",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nDisable \"cgo\" support by running the `go` tool with `CGO_ENABLED=0` -\n```bash\nCGO_ENABLED=0 go build .\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24784",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-150"
            ]
          }
        ],
        "summary": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.8]",
              "[1.22.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616748",
        "references": [
          "http://www.openwall.com/lists/oss-security/2024/03/08/4",
          "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg",
          "https://go.dev/issue/65083",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24784",
          "https://security.netapp.com/advisory/ntap-20240329-0007/",
          "https://pkg.go.dev/vuln/GO-2024-2609",
          "https://go.dev/cl/555596"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-39318",
            "cvss_v3_score": "6.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cwe": [
              "CWE-79"
            ]
          }
        ],
        "summary": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.8]",
              "[1.21.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-531550",
        "references": [
          "https://go.dev/cl/526156",
          "https://groups.google.com/g/golang-dev/c/2C5vbR-UNkI/m/L1hdrPhfBAAJ",
          "https://security.gentoo.org/glsa/202311-09",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-39318",
          "https://pkg.go.dev/vuln/GO-2023-2041",
          "https://security.netapp.com/advisory/ntap-20231020-0009/",
          "https://go.dev/issue/62196"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-28327",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.9]",
              "[1.18.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-208920",
        "references": [
          "https://pkg.go.dev/vuln/GO-2022-0435",
          "https://go.dev/issue/52075",
          "https://groups.google.com/g/golang-announce/c/oecdBNLOml8",
          "https://cert-portal.siemens.com/productcert/pdf/ssa-744259.pdf",
          "https://security.gentoo.org/glsa/202208-02",
          "https://go.googlesource.com/go/+/37065847d87df92b5eb246c88ba2085efcf0b331",
          "https://security.netapp.com/advisory/ntap-20220915-0010/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/NY6GEAJMNKKMU5H46QO4D7D6A24KSPXE/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RQXU752ALW53OJAF5MG3WMR5CCZVLWW6/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZY2SLWOQR4ZURQ7UBRZ7JIX6H6F5JHJR/",
          "https://groups.google.com/g/golang-announce",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/F3BMW5QGX53CMIJIZWKXFKBJX2C5GWTY/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/42TYZC4OAY54TO75FBEFAPV5G7O4D5TM/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Z55VUVGO7E5PJFXIOVAY373NZRHBNCI5/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RCRSABD6CUDIZULZPZL5BJ3ET3A2NEJP/",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-28327",
          "https://go.dev/cl/397135"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Go's `crypto/elliptic` package may lead to a denial of service when processing a user-supplied scalar input.",
          "full_description": "The [crypto/elliptic](https://pkg.go.dev/crypto/elliptic) is a library that provides cryptographic operations for elliptic curve cryptography in the Go programming language. It is a standard package included in the Go standard library and is widely used in the development of secure applications that rely on elliptic curve cryptography.\nThe P256 elliptic curve is utilized in cryptographic protocols, specifically in the widespread deployment of the ECDSA (Elliptic Curve Digital Signature Algorithm) signature scheme.\nIn elliptic curve cryptography, a scalar refers to a non-negative integer used for scalar multiplication with a point on the curve.\n\nA flaw discovered in this P256 elliptic curve can cause the application to panic and may lead to a denial of service.\nIf the input scalar is strictly longer than 32 bytes, the `P256().ScalarMult` or `P256().ScalarBaseMult` functions may perform an out-of-bound write, thus causing a Golang panic.\n\nNote: Indirect uses through `crypto/ecdsa` and `crypto/tls` are unaffected. `amd64`, `arm64`, `ppc64le` and `s390x` platforms are also unaffected.\n\nExample of vulnerable code:\n```\nfunc VulnExample(c elliptic.Curve, px *big.Int, py *big.Int) (int, error) {\n\th.ax, h.ay = c.ScalarBaseMult(h.s.Bytes())\n\ttx, ty := c.ScalarMult(px, py, h.s.Bytes())\n\th.bx, h.by = c.Add(tx, ty, c.Params().Gx, c.Params().Gy)\n\treturn DiscreteLog(h.bx, h,by, c, 1\u003c\u003c10)\n```",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attackers must find a remote input that propagates to the vulnerable functions `P256().ScalarMult()` or `P256().ScalarBaseMult()`.",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "A specifically crafted input longer than 32 bytes could lead to a buffer overflow. However, this is unlikely to happen in most cases since the `crypto/elliptic` package is typically used indirectly through other packages, and the inputs to the vulnerable function are rarely under user control.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nCheck the length of the passed scalar as in the following example:\n```\nfunc NotVulnExample(c elliptic.Curve, px *big.Int, py *big.Int) (int, error) {\n    // Check that the scalar value is less than 32 bytes long\n    if len(h.s.Bytes()) \u003e 32 {\n        return 0, errors.New(\"scalar value too long\")\n    }\n    \n    h.ax, h.ay = c.ScalarBaseMult(h.s.Bytes())\n    tx, ty := c.ScalarMult(px, py, h.s.Bytes())\n    h.bx, h.by = c.Add(tx, ty, c.Params().Gx, c.Params().Gy)\n\n    return DiscreteLog(h.bx, h.by, h.ay, c, 1\u003c\u003c10)\n}\n\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24539",
            "cvss_v3_score": "7.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cwe": [
              "CWE-94",
              "CWE-74"
            ]
          }
        ],
        "summary": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.9]",
              "[1.20.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-520142",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241129-0005/",
          "https://pkg.go.dev/vuln/GO-2023-1751",
          "https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU",
          "https://go.dev/issue/59720",
          "https://go.dev/cl/491615",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24539"
        ],
        "extended_information": {
          "short_description": "Insufficient filtering in Go's `html/template` leads to XSS when executing crafted templates.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published",
              "description": "Test code contains PoC that demonstrates code injection."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attackers must find a remote input that propagates into a Go template that is subsequently rendered with `Template.Execute` or `Template.ExecuteTemplate`. This is highly unlikely and is considered a bad practice regardless of this vulnerability.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24787",
            "cvss_v3_score": "6.4",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "summary": "On Darwin, building a Go module which contains CGO can trigger arbitrary code execution when using the Apple version of ld, due to usage of the -lto_library flag in a \"#cgo LDFLAGS\" directive.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.10]",
              "[1.22.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616754",
        "references": [
          "https://go.dev/cl/583815",
          "http://www.openwall.com/lists/oss-security/2024/05/08/3",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24787",
          "https://go.dev/issue/67119",
          "https://pkg.go.dev/vuln/GO-2024-2825",
          "https://security.netapp.com/advisory/ntap-20240531-0006/",
          "https://groups.google.com/g/golang-announce/c/wkkO4P9stm0"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24785",
            "cvss_v3_score": "5.4",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cwe": [
              "CWE-150"
            ]
          }
        ],
        "summary": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.8]",
              "[1.22.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616746",
        "references": [
          "http://www.openwall.com/lists/oss-security/2024/03/08/4",
          "https://go.dev/cl/564196",
          "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg",
          "https://security.netapp.com/advisory/ntap-20240329-0008/",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24785",
          "https://go.dev/issue/65697",
          "https://pkg.go.dev/vuln/GO-2024-2610"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-29409",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cwe": [
              "CWE-400"
            ]
          }
        ],
        "summary": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.12]",
              "[1.20.7]",
              "[1.21.0-rc.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-527218",
        "references": [
          "https://groups.google.com/g/golang-announce/c/X0b6CsSAaYI/m/Efv5DbZ9AwAJ",
          "https://pkg.go.dev/vuln/GO-2023-1987",
          "https://go.dev/issue/61460",
          "https://go.dev/cl/515257",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-29409",
          "https://security.gentoo.org/glsa/202311-09",
          "https://security.netapp.com/advisory/ntap-20230831-0010/"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24540",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-74",
              "CWE-77",
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
        "severity": "Critical",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.9]",
              "[1.20.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-520141",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241115-0008/",
          "https://pkg.go.dev/vuln/GO-2023-1752",
          "https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24540",
          "https://go.dev/issue/59721",
          "https://go.dev/cl/491616"
        ],
        "extended_information": {
          "short_description": "Insufficient filtering in Go's `html/template` leads to XSS when executing crafted templates.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attackers must find a remote input that propagates into a Go template that is subsequently rendered with `Template.Execute` or `Template.ExecuteTemplate`. This is highly unlikely and is considered a bad practice regardless of this vulnerability.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45289",
            "cvss_v3_score": "4.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
            "cwe": [
              "CWE-212"
            ]
          }
        ],
        "summary": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not. A maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.8]",
              "[1.22.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616747",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45289",
          "https://security.netapp.com/advisory/ntap-20240329-0006/",
          "https://go.dev/issue/65065",
          "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg",
          "https://go.dev/cl/569340",
          "https://pkg.go.dev/vuln/GO-2024-2600",
          "http://www.openwall.com/lists/oss-security/2024/03/08/4"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-24536",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400",
              "CWE-770"
            ]
          }
        ],
        "summary": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.19.8]",
              "[1.20.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-513414",
        "references": [
          "https://security.netapp.com/advisory/ntap-20230526-0007/",
          "https://pkg.go.dev/vuln/GO-2023-1705",
          "https://go.dev/cl/482075",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-24536",
          "https://go.dev/cl/482076",
          "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8",
          "https://go.dev/issue/59153",
          "https://go.dev/cl/482077",
          "https://security.gentoo.org/glsa/202311-09"
        ],
        "extended_information": {
          "short_description": "Improper part counting in Go's `mime/multipart` and `net/http` packages can lead to CPU and memory denial of service when processing form inputs with many parts.",
          "full_description": "The `net/http` and `mime/multipart` packages in Go are used for handling HTTP requests and responses, and for parsing multipart/form-data requests, respectively.\nThe `mime/multipart.Reader.ReadForm` function can undercount the amount of memory consumed when parsing multipart form inputs, leading to larger inputs being accepted than intended. Additionally, the function can allocate a large number of short-lived buffers, which can further increase pressure on the garbage collector. These factors combined can allow an attacker to cause the program to consume large amounts of CPU and memory, potentially leading to a denial of service.\n\nNote that some `net/http` package functions such as `Request.FormFile`, `Request.FormValue`, `Request.ParseMultipartForm` and `Request.PostFormValue` are also vulnerable as they call  the vulnerable function `mime/multipart.Reader.ReadForm`.\n\n```go\n// forms.go\npackage main\n\nimport (\n    \"html/template\"\n    \"net/http\"\n)\n\ntype ContactDetails struct {\n    Email   string\n    Subject string\n    Message string\n}\n\nfunc main() {\n    tmpl := template.Must(template.ParseFiles(\"forms.html\"))\n\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        if r.Method != http.MethodPost {\n            tmpl.Execute(w, nil)\n            return\n        }\n\n        details := ContactDetails{\n            Email:   r.FormValue(\"email\"),\n            Subject: r.FormValue(\"subject\"),\n            Message: r.FormValue(\"message\"),\n        }\n\n        // do something with details\n        _ = details\n\n        tmpl.Execute(w, struct{ Success bool }{true})\n    })\n\n    http.ListenAndServe(\":8080\", nil)\n}\n```",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that HTTP form data will be received from possibly untrusted sources"
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This issue leads to denial of service in server applications."
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "A request containing multipart form data with many parts is enough to trigger the issue."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attackers must find a remote input that propagates to the `mime/multipart.Reader.ReadForm` function.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-41772",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-20"
            ]
          }
        ],
        "summary": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.10]",
              "[1.17.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-189375",
        "references": [
          "https://cert-portal.siemens.com/productcert/pdf/ssa-744259.pdf",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20211210-0003/",
          "https://nvd.nist.gov/vuln/detail/CVE-2021-41772",
          "https://go.googlesource.com/go/+/b24687394b55a93449e2be4e6892ead58ea9a10f",
          "https://go.dev/cl/349770",
          "https://security.gentoo.org/glsa/202208-02",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ON7BQRRJZBOR5TJHURBAB3WLF4YXFC6Z/",
          "https://pkg.go.dev/vuln/GO-2021-0264",
          "https://groups.google.com/g/golang-announce/c/0fM21h43arc",
          "https://go.dev/issue/48085",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4OFS3M3OFB24SWPTIAPARKGPUMQVUY6Z/"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Go's archive/zip leads to denial of service when reading crafted ZIP archives.",
          "full_description": "[Go](https://golang.org/) is an open source programming language developed by Google with the same syntax of C language but with memory safety, garbage collection, structural typing, and CSP-style concurrency.\n\nIt was discovered that the built-in archive/zip `Reader.Open` API doesn't properly validate the input ZIP file. Specifically, attackers can exploit this vulnerability by providing a crafted ZIP archive containing invalid or empty filenames, which will lead to a Panic and subsequently, a program crash.\n\nA public [exploit](https://play.golang.org/p/WWHxZRKu2gY) exists which demonstrates denial of service, making this vulnerability likely to be exploited in practice.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a way to upload a crafted ZIP archive which will get processed by the archive/zip `Reader.Open` API",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "The published exploit demonstrates DoS by throwing a Panic"
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that the archive/zip `Reader.Open` API will be used to open untrusted ZIP archives"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41716",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "NVD-CWE-Other",
              "CWE-158"
            ]
          }
        ],
        "summary": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.18.8]",
              "[1.19.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-260471",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41716",
          "https://groups.google.com/g/golang-announce/c/mbHY1UY3BaM/m/hSpmRzk-AgAJ",
          "https://pkg.go.dev/vuln/GO-2022-1095",
          "https://go.dev/issue/56284",
          "https://go.dev/cl/446916"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Golang allows attackers to set arbitrary environment variables.",
          "full_description": "[Golang](https://go.dev/) is a statically typed, compiled programming language.\n\nIt was discovered that due to insufficient checks in `syscall.StartProcess` and `os/exec.Cmd`, an attacker can overwrite arbitrary environment variables.\n\nThe vulnerability only applies to Windows systems, as an attacker needs to make use of the `NUL` value.\n\nAn example:\nThe environment variable string `A=B\\x00C=D` will set the environment variables `A=B` and `C=D`.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue can be exploited by attackers over the network",
              "description": "When a remote attacker has access to set environment variables through a network endpoint that takes user input- this vulnerability will also be remotely exploitable."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The code needs to use user input as an environment variable to trigger this vulnerability.",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "This only applies to Windows systems.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-1962",
            "cvss_v3_score": "5.5",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248653",
        "references": [
          "https://go.dev/cl/417063",
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://go.googlesource.com/go/+/695be961d57508da5a82217f7415200a11845879",
          "https://pkg.go.dev/vuln/GO-2022-0515",
          "https://go.dev/issue/53616",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-1962"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30632",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248631",
        "references": [
          "https://go.dev/cl/417066",
          "https://go.googlesource.com/go/+/ac68c6c683409f98250d34ad282b9e1b0c9095ef",
          "https://pkg.go.dev/vuln/GO-2022-0522",
          "https://go.dev/issue/53416",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30632",
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang path/filepath.Glob leads to denial of service when processing attacker-supplied Glob patterns.",
          "full_description": "The `Glob` command allows listing files with \"Glob\" patterns - path strings which may contain wildcard characters such as `*` and `?` which match any character.\n\nIt was discovered that calling `Glob` on a path which contains a large number of path separators can cause  panic due to stack exhaustion, which will crash the calling Go process.\nExample code snippet that triggers the issue -\n```go\n_, err := Glob(\"/*\" + strings.Repeat(\"/\", 10001))\n```\nNote that it is unlikely that remote attackers will be able to control glob patterns",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into a `Glob` API call (first argument)",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "It is unlikely that remote attackers will be able to control a Glob pattern. The severity of this issue being exploited by a local attacker is limited.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-30630",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248649",
        "references": [
          "https://pkg.go.dev/vuln/GO-2022-0527",
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://go.dev/cl/417065",
          "https://go.googlesource.com/go/+/fa2d41d0ca736f3ad6b200b2a4e134364e9acc59",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-30630",
          "https://go.dev/issue/53415"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang io/fs.Glob leads to denial of service when processing attacker-supplied Glob patterns.",
          "full_description": "The `Glob` command allows listing files with \"Glob\" patterns - path strings which may contain wildcard characters such as `*` and `?` which match any character.\n\nIt was discovered that calling `Glob` on a path which contains a large number of path separators can cause  panic due to stack exhaustion, which will crash the calling Go process.\nExample code snippet that triggers the issue -\n```go\n_, err := Glob(fs, \"/*\" + strings.Repeat(\"/\", 10001))\n```\nNote that it is unlikely that remote attackers will be able to control glob patterns",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into a `Glob` API call (first argument)",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "It is unlikely that remote attackers will be able to control a Glob pattern. The severity of this issue being exploited by a local attacker is limited.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-24789",
            "cvss_v3_score": "5.5",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-390",
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.21.11]",
              "[1.22.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-616756",
        "references": [
          "https://go.dev/cl/585397",
          "http://www.openwall.com/lists/oss-security/2024/06/04/1",
          "https://pkg.go.dev/vuln/GO-2024-2888",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-24789",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/U5YAEIA6IUHUNGJ7AIXXPQT6D2GYENX7/",
          "https://security.netapp.com/advisory/ntap-20250131-0008/",
          "https://go.dev/issue/66869",
          "https://groups.google.com/g/golang-announce/c/XbxouI9gY7k/m/TuoGEhxIEwAJ"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2025-4673",
            "cvss_v3_score": "6.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N",
            "cwe": [
              "CWE-201"
            ]
          }
        ],
        "summary": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.23.10]",
              "[1.24.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-704401",
        "references": [
          "https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A",
          "https://go.dev/cl/679257",
          "https://go.dev/issue/73816",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-4673",
          "https://pkg.go.dev/vuln/GO-2025-3751"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-32148",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
            "cwe": [
              "CWE-200",
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248646",
        "references": [
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://go.dev/issue/53423",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-32148",
          "https://go.googlesource.com/go/+/b2cc0fecc2ccd80e6d5d16542cc684f97b3a9c8a",
          "https://pkg.go.dev/vuln/GO-2022-0520",
          "https://go.dev/cl/412857"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-23773",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:P/A:N",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-436"
            ]
          }
        ],
        "summary": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.14]",
              "[1.17.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-198037",
        "references": [
          "https://pkg.go.dev/vuln/GO-2022-0318",
          "https://go.dev/cl/378400",
          "https://go.dev/issue/35671",
          "https://security.netapp.com/advisory/ntap-20220225-0006/",
          "https://groups.google.com/g/golang-announce/c/SUsQn0aSgPQ",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://go.googlesource.com/go/+/fa4d9b8e2bc2612960c80474fca83a4c85a974eb",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-23773",
          "https://security.gentoo.org/glsa/202208-02"
        ],
        "extended_information": {
          "short_description": "Design issue in Go's `cmd/go` package can lead to unexpected behavior when fetching a tag version that does not exist while a branch with the same name does exist.",
          "full_description": "[cmd/go](https://pkg.go.dev/cmd/go) is a command-line tool and part of the Go programming language's toolchain. It is primarily used for managing Go modules, which are collections of Go packages and their dependencies.\nThe logic in `(*modfetch).codeRepo.Stat` function, part of the `cmd/go` package, has a short-circuit when processing a branch name that resembles a version tag (such as `v1.0.0` or `subdir/v2.0.0-dev`).\nIn that issue, the concern raised was that the vulnerability allowed branches with names resembling version tags to be treated as valid versions by the `go` command, potentially bypassing the existing ACLs. This means that even if an organization had restrictions on creating version tags, a branch named `v1.0.0` or similar could still be mistakenly recognized as a valid version by Go.\n\nFor example, if a system contains a branch named `v1.0.1` and a corresponding tag is missing for that specific version, running the command `go get [...]@v1.0.1` would fetch the branch instead of a version tag.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue can only be exploited by an attacker that can execute code on the vulnerable machine (excluding exceedingly rare circumstances)",
              "description": "This issue is locally exploitable as it requires the attacker to have access to a low-permission user in the system (that can fetch tags) to get a branch's content that is not supposed to be available to them.",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "This issue can be triggered in a very specific configuration where an organization or repository hosting a Go project may have ACLs in place to restrict the creation of version tags but not branches. The attackers must find a branch whose name resembles a version tag name which is very unlikely.",
              "is_positive": true
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The impact depends on the sensitivity of the branch content. The worst case is data leakage of sensitive content on the next to-be-released versions.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-39293",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-770"
            ]
          }
        ],
        "summary": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.16.8]",
              "[1.17.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-196313",
        "references": [
          "https://go.googlesource.com/go/+/bacbc33439b124ffd7392c91a5f5d96eca8c0c0b",
          "https://pkg.go.dev/vuln/GO-2022-0273",
          "https://cert-portal.siemens.com/productcert/pdf/ssa-222547.pdf",
          "https://security.netapp.com/advisory/ntap-20220217-0009/",
          "https://groups.google.com/g/golang-announce/c/dx9d7IOseHw",
          "https://go.dev/cl/343434",
          "https://go.dev/issue/47801",
          "https://nvd.nist.gov/vuln/detail/CVE-2021-39293",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00021.html"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-45336",
            "cvss_v3_score": "6.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cwe": [
              "CWE-116"
            ]
          }
        ],
        "summary": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com. In the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
        "severity": "Medium",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.22.11]",
              "[1.23.5]",
              "[1.24.0-rc.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-668447",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-45336",
          "https://groups.google.com/g/golang-dev/c/CAWXhan3Jww/m/bk9LAa-lCgAJ",
          "https://groups.google.com/g/golang-dev/c/bG8cv1muIBM/m/G461hA6lCgAJ",
          "https://go.dev/issue/70530",
          "https://go.dev/cl/643100",
          "https://security.netapp.com/advisory/ntap-20250221-0003/",
          "https://pkg.go.dev/vuln/GO-2025-3420"
        ],
        "extended_information": {}
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41715",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "NVD-CWE-Other"
            ]
          }
        ],
        "summary": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.18.7]",
              "[1.19.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-257703",
        "references": [
          "https://pkg.go.dev/vuln/GO-2022-1039",
          "https://groups.google.com/g/golang-announce/c/xtuG5faxtaU",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41715",
          "https://go.dev/cl/439356",
          "https://go.dev/issue/55949",
          "https://security.gentoo.org/glsa/202311-09"
        ],
        "extended_information": {
          "short_description": "Unbounded resource consumption in Golang regexp/syntax enables attackers to perform denial of service when compiling or parsing crafted regular expressions.",
          "full_description": "Golang's [regexp/syntax](https://pkg.go.dev/regexp/syntax) package enables parsing of regular expressions into parse (syntax) trees and compiling parse trees into programs.\n\nIt was discovered that the parsed regexp representation had an unbounded memory footprint, and in some cases relatively small regexps can consume much larger amounts of memory. The issue was fixed by rejecting parse trees which consume more than 256MB of memory.\n\nWhile the `regexp/syntax` package by itself is not that popular, however, the vulnerable function `syntax.Parse` is used by multiple functions from the much more popular `regexp` package.\n\nAttackers can trigger the vulnerability by giving a large or complicated regexp to one of the following API functions:\n\nFrom `regexp/syntax`:\n\n1. `Parse`\n\nFrom `regexp`:\n\n1. `Match`\n2. `MatchReader`\n3. `MatchString`\n4. `Regexp.Compile`\n5. `Regexp.CompilePOSIX`\n6. `Regexp.MustCompile`\n7. `Regexp.MustCompilePOSIX`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attacker must find remote input that propagates into the `Parse` API, either directly or through a vulnerable function in the more popular `regexp` package. This is very unlikely since regular expressions are usually not compiled from untrusted sources.",
              "is_positive": true
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Linear complexity memory consumption (albeit the linear constant can be 40KB per 1 regex character)",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "CVSS doesn't take into account the high attack complexity of this attack, since the researcher must find a remote input for regular expressions to be compiled",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC from test code demonstrates DoS"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-45287",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-203",
              "CWE-208"
            ]
          }
        ],
        "summary": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.20.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-540244",
        "references": [
          "https://people.redhat.com/~hkario/marvin/",
          "https://groups.google.com/g/golang-announce/c/QMK8IQALDvA",
          "https://security.netapp.com/advisory/ntap-20240112-0005/",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-45287",
          "https://go.dev/issue/20654",
          "https://pkg.go.dev/vuln/GO-2023-2375",
          "https://go.dev/cl/326012/26"
        ],
        "extended_information": {
          "short_description": "A design problem in Golang crypto/tls may lead to data leakage when performing RSA-based TLS key exchange.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker needs to find the use of sensitive data within a vulnerable function utilizing the crypto/tls library for cryptographic calculations.",
              "is_positive": true
            },
            {
              "name": "No high-impact exploit or technical writeup were published, and exploitation of the issue with high impact is either non-trivial or completely unproven",
              "description": "To exploit this vulnerability an attacker would need an in-depth understanding of how to perform a side-channel timing attack, as well as be familiar with the Golang's crypto package's inner workings.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Data leakage."
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "Exploiting this vulnerability is highly challenging, requiring a timing side channel and a complex cryptographic attack.",
              "is_positive": true
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "Exploiting the vulnerability may lead to leakage, including recovery of session key bits. However, execution of the attack may not always produce valuable data and is very context-dependent.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-28131",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-674"
            ]
          }
        ],
        "summary": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
        "severity": "High",
        "components": {
          "go://github.com/golang/go:1.17": {
            "fixed_versions": [
              "[1.17.12]",
              "[1.18.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "docker://oliver006/redis_exporter:v1.27.0"
                },
                {
                  "component_id": "generic://sha256:4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d/sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar",
                  "full_path": "sha256__4655098f79b0b765b4e5b732bb1484f230c2867bb67c84f94e26b30480d11a3d.tar"
                },
                {
                  "component_id": "go://github.com/oliver006/redis_exporter:53263f439e9bb9b7c2a43d7849b2ec4f2d41ce9e7e94cd52c54ae4e29da6c861",
                  "full_path": "redis_exporter"
                },
                {
                  "component_id": "go://github.com/golang/go:1.17",
                  "full_path": "github.com/golang/go"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-248652",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-28131",
          "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE",
          "https://go.dev/issue/53614",
          "https://go.googlesource.com/go/+/08c46ed43d80bbb67cb904944ea3417989be4af3",
          "https://go.dev/cl/417062",
          "https://pkg.go.dev/vuln/GO-2022-0521"
        ],
        "extended_information": {
          "short_description": "Uncontrolled recursion in Golang encoding/xml.Decoder.Skip leads to denial of service when processing attacker-supplied XML documents.",
          "full_description": "Golang provides support for iterating over an XML document by using the `Decoder` object supplied by the [encoding/xml](https://pkg.go.dev/encoding/xml) package. The `Decoder` object also supports skipping over XML elements (including their nested children) by calling the `Skip` method recursively.\n\nIt was discovered that when given a deeply nested XML document, the `(*Decoder).Skip` method will recurse many times, which may lead to stack exhaustion. This could cause the calling Golang process to crash.\n\nThe issue was fixed by replacing the recursion portion of the function with a depth counter. The depth counter will increase for each new start token, and while the depth counter is not 0, will decrease for each new end token.\n\nWhile `(*Decoder).Skip` may not be used directly, it is called by the widely used `(*Decoder).Decode`, `(*Decoder).DecodeElement` and `Unmarshal` functions.\n\nExample code snippets that are vulnerable to this issue -\n```go\ndecoder := xml.NewDecoder(attacker_input)\nerr := decoder.Skip()\n```\n\n```go\nerr := xml.Unmarshal(attacker_input, result_object)\n```\n\nThe vulnerable behavior can be exploited by attackers to cause denial of service, by providing crafted, deeply nested XML documents to one of the following API functions (from `encoding/xml`):\n\n1. `(*Decoder).Skip`\n2. `(*Decoder).Decode`\n3. `(*Decoder).DecodeElement`\n4. `Unmarshal`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `encoding/xml.Unmarshal` API call (first argument) or an `encoding/xml.NewDecoder` API call (first argument). In the latter case, the created decoder type must then also call either the `Skip`, `Decode` or `DecodeElement` methods.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Published PoC in test code demonstrates denial of service"
            }
          ]
        }
      }
    ],
    "component_id": "docker://oliver006/redis_exporter:v1.27.0",
    "package_type": "docker",
    "status": "completed"
  }
]
