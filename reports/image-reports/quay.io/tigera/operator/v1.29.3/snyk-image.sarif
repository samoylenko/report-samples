{
  "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "semanticVersion": "1.1299.0",
          "version": "1.1299.0",
          "informationUri": "https://docs.snyk.io/",
          "properties": {
            "artifactsScanned": 0
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "semanticVersion": "1.1299.0",
          "version": "1.1299.0",
          "informationUri": "https://docs.snyk.io/",
          "properties": {
            "artifactsScanned": 537
          },
          "rules": [
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTML-5816820",
              "shortDescription": {
                "text": "Medium severity - Cross-site Scripting (XSS) vulnerability in golang.org/x/net/html"
              },
              "fullDescription": {
                "text": "(CVE-2023-3978) golang.org/x/net/html@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/html](https://pkg.go.dev/golang.org/x/net/html) is a package that implements an HTML5-compliant tokenizer and parser.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in the `render1()` function in `render.go`. Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be.\n## Details\n\nCross-site scripting (or XSS) is a code vulnerability that occurs when an attacker “injects” a malicious script into an otherwise trusted website. The injected script gets downloaded and executed by the end user’s browser when the user interacts with the compromised website.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `golang.org/x/net/html` to version 0.13.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/net/commit/8ffa475fbdb33da97e8bf79cc5791ee8751fca5e)\n- [GitHub Issue](https://go.dev/issue/61615)\n- [Golang PR](https://go.dev/cl/514896)\n- [Vulnerability Advisory](https://pkg.go.dev/vuln/GO-2023-1988)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "gomodules"
                ],
                "cvssv3_baseScore": 6.1,
                "security-severity": "6.1"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTML-8535262",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in golang.org/x/net/html"
              },
              "fullDescription": {
                "text": "(CVE-2024-45338) golang.org/x/net/html@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/html](https://pkg.go.dev/golang.org/x/net/html) is a package that implements an HTML5-compliant tokenizer and parser.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) through the functions `parseDoctype`, `htmlIntegrationPoint`, `inBodyIM` and `inTableIM`  due to inefficient usage of the method `strings.ToLower` combining with the `==` operator to convert strings to lowercase and then comparing them.\n\n\nAn attacker can cause the application to slow down significantly by crafting inputs that are processed non-linearly.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](https://security.snyk.io/vuln/SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `golang.org/x/net/html` to version 0.33.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/net/commit/8e66b04771e35c4e4125e8c60334b34e2423effb)\n- [GitHub Issue](https://github.com/golang/go/issues/70906)\n- [Google Groups Forum](https://groups.google.com/g/golang-announce/c/wSCRmFnNmPA/m/Lvcd0mRMAwAJ)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.7,
                "security-severity": "8.7"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTML-9572088",
              "shortDescription": {
                "text": "Medium severity - Improper Validation of Syntactic Correctness of Input vulnerability in golang.org/x/net/html"
              },
              "fullDescription": {
                "text": "(CVE-2025-22872) golang.org/x/net/html@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/html](https://pkg.go.dev/golang.org/x/net/html) is a package that implements an HTML5-compliant tokenizer and parser.\n\nAffected versions of this package are vulnerable to Improper Validation of Syntactic Correctness of Input in the tokenizer in `token.go`, which incorrectly interprets tags as closing tags, allowing malicious input to be incorrectly processed and the DOM to be corrupted.\n## Details\n\nCross-site scripting (or XSS) is a code vulnerability that occurs when an attacker “injects” a malicious script into an otherwise trusted website. The injected script gets downloaded and executed by the end user’s browser when the user interacts with the compromised website.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `golang.org/x/net/html` to version 0.38.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/net/commit/e1fcd82abba34df74614020343be8eb1fe85f0d9)\n- [GitHub Issue](https://github.com/golang/go/issues/73070)\n- [Google Groups Announcement](https://groups.google.com/g/golang-announce/c/ezSKR9vqbqA)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1286",
                  "gomodules"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5953327",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-44487) golang.org/x/net/http2@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the implementation of the HTTP/2 protocol. An attacker can cause a denial of service (including via DDoS) by rapidly resetting many streams through request cancellation.\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.17.0 or higher.\n## References\n- [Github Commit](https://github.com/helidon-io/helidon/commit/58f43670086e530750c7cb74b0bec92bf5189c79)\n- [Github Commit](https://github.com/pgjones/hypercorn/commit/7c39c68b61012a3c30979176080861c8b00fb229)\n- [GitHub Commit](https://github.com/akka/akka-http/commit/1f29fe6a8567c57dfe848a21ae883304cce5646d)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e)\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148)\n- [GitHub Commit](https://github.com/gravitational/teleport/commit/15f34f927a45130408eb16ed09af5620270d4d1f)\n- [GitHub Commit](https://github.com/h2o/h2o/commit/28fe15117b909588bf14269a0e1c6ec4548579fe)\n- [GitHub Commit](https://github.com/kubernetes/apimachinery/commit/be9188050914374ee8128239e5a2e5998d7897f5)\n- [GitHub Commit](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61)\n- [GitHub Commit](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832)\n- [GitHub Commit](https://github.com/operator-framework/operator-lifecycle-manager/commit/9ec03f07f942dc9cef736957fa152e39157d6e13)\n- [Snyk Blog](https://snyk.io/blog/find-fix-http-2-rapid-reset-zero-day-vulnerability-cve-2023-44487/)\n- [Vulnerability Discovery](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/)\n- [Vulnerability Explanation](https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack)\n- [CISA - Known Exploited Vulnerabilities](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)\n- [PoC in GitHub](https://github.com/studiogangster/CVE-2023-44487)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.7,
                "security-severity": "8.7"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5958903",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-39325) golang.org/x/net/http2@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling when `MaxConcurrentStreams` handler `goroutines` running, by rapidly creating requests and\r\nimmediately resetting them. A a handler is started until one of the existing handlers exits.\r\n\r\n**Note:**\r\n\r\nThis issue is related to [CVE-2023-44487](https://security.snyk.io/vuln/SNYK-GOLANG-GOLANGORGXNETHTTP2-5953327)\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.17.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/net/commit/695775ce641b0f80c9cf03e8a796595355422dd3)\n- [GitHub Commit](https://github.com/golang/net/commit/b225e7ca6dde1ef5a5ae5ce922861bda011cfabd)\n- [GitHub Issue](https://github.com/golang/go/issues/63417)\n- [GitHub PR](https://github.com/containerd/containerd/pull/9387)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.7,
                "security-severity": "8.7"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-45288) golang.org/x/net/http2@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling when reading header data from `CONTINUATION` frames. As part of the HPACK flow, all incoming `HEADERS` and `CONTINUATION` frames are read even if their payloads exceed `MaxHeaderBytes` and will be discarded. An attacker can send excessive data over a connection to render it unresponsive.\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.23.0 or higher.\n## References\n- [Github Commit](https://github.com/traefik/traefik/commit/099c7e9444a5d56918b8221672fc8d6a09a5d389)\n- [GitHub Commit](https://github.com/golang/net/commit/ba872109ef2dc8f1da778651bd1fd3792d0e4587)\n- [GitHub Issue](https://github.com/golang/go/issues/65051)\n- [Go Advisory](https://pkg.go.dev/vuln/GO-2024-2687)\n- [PoC](https://github.com/hex0punk/cont-flood-poc)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.7,
                "security-severity": "8.7"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTPHTTPPROXY-9058601",
              "shortDescription": {
                "text": "High severity - Server-side Request Forgery (SSRF) vulnerability in golang.org/x/net/http/httpproxy"
              },
              "fullDescription": {
                "text": "(CVE-2025-22870) golang.org/x/net/http/httpproxy@v0.7.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http/httpproxy](https://pkg.go.dev/golang.org/x/net/http/httpproxy) is a package for HTTP proxy determination based on environment variables, as provided by net/http's ProxyFromEnvironment function\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) in `proxy.go`, because hostname matching against proxy patterns may treat an IPv6 zone ID as a hostname component. An environment variable value like `*.example.com` could be matched to a request intended for `[::1%25.example.com]:80`.\n## Remediation\nUpgrade `golang.org/x/net/http/httpproxy` to version 0.36.0 or higher.\n## References\n- [Git Commit](https://go-review.googlesource.com/c/go/+/654717/4/src/vendor/golang.org/x/net/http/httpproxy/proxy.go)\n- [GitHub Commit](https://github.com/golang/go/commit/3705a6f1f0a66e70916bb09f50f4fcd1c520df53)\n- [GitHub Commit](https://github.com/golang/net/commit/76f9bf3279eff2e596db4960a78a2665d0ff9405)\n- [GitHub Issue](https://github.com/golang/go/issues/71984)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-918",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.8,
                "security-severity": "8.8"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXOAUTH2JWS-8749594",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/oauth2/jws"
              },
              "fullDescription": {
                "text": "(CVE-2025-22868) golang.org/x/oauth2/jws@v0.0.0-20220718184931-c8730f7fcb92"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling due to improper parsing of malformed tokens which can lead to memory consumption.\n## Remediation\nUpgrade `golang.org/x/oauth2/jws` to version 0.27.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/oauth2/commit/681b4d8edca1bcfea5bce685d77ea7b82ed3e7b3)\n- [GitHub Commit](https://github.com/lestrrat-go/jwx/commit/d0bb4610154d45b7dce7d706a8068ea72586d249)\n- [GitHub Issue](https://github.com/golang/go/issues/71490)\n- [GitHub PR](https://github.com/lestrrat-go/jwx/pull/1308)\n- [Go Advisory](https://pkg.go.dev/vuln/GO-2025-3488)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.7,
                "security-severity": "8.7"
              }
            },
            {
              "id": "SNYK-GOLANG-K8SIOAPIMACHINERYPKGUTILRUNTIME-8367153",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in k8s.io/apimachinery/pkg/util/runtime"
              },
              "fullDescription": {
                "text": "(CVE-2023-44487) k8s.io/apimachinery/pkg/util/runtime@v0.25.6"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the implementation of the HTTP/2 protocol. An attacker can cause a denial of service (including via DDoS) by rapidly resetting many streams through request cancellation.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](https://security.snyk.io/vuln/SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `k8s.io/apimachinery/pkg/util/runtime` to version 0.29.0-alpha.3, 1.29.0-alpha.3 or higher.\n## References\n- [Github Commit](https://github.com/helidon-io/helidon/commit/58f43670086e530750c7cb74b0bec92bf5189c79)\n- [Github Commit](https://github.com/pgjones/hypercorn/commit/7c39c68b61012a3c30979176080861c8b00fb229)\n- [GitHub Commit](https://github.com/akka/akka-http/commit/1f29fe6a8567c57dfe848a21ae883304cce5646d)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e)\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148)\n- [GitHub Commit](https://github.com/gravitational/teleport/commit/15f34f927a45130408eb16ed09af5620270d4d1f)\n- [GitHub Commit](https://github.com/h2o/h2o/commit/28fe15117b909588bf14269a0e1c6ec4548579fe)\n- [GitHub Commit](https://github.com/kubernetes/apimachinery/commit/be9188050914374ee8128239e5a2e5998d7897f5)\n- [GitHub Commit](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61)\n- [GitHub Commit](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832)\n- [GitHub Commit](https://github.com/operator-framework/operator-lifecycle-manager/commit/9ec03f07f942dc9cef736957fa152e39157d6e13)\n- [Snyk Blog](https://snyk.io/blog/find-fix-http-2-rapid-reset-zero-day-vulnerability-cve-2023-44487/)\n- [Vulnerability Discovery](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/)\n- [Vulnerability Explanation](https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack)\n- [CISA - Known Exploited Vulnerabilities](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)\n- [PoC in GitHub](https://github.com/studiogangster/CVE-2023-44487)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.7,
                "security-severity": "8.7"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTML-5816820",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/html package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/html@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTML-8535262",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/html package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/html@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTML-9572088",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/html package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/html@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5953327",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5958903",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTPHTTPPROXY-9058601",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http/httpproxy package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http/httpproxy@v0.7.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXOAUTH2JWS-8749594",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/oauth2/jws package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/oauth2/jws@v0.0.0-20220718184931-c8730f7fcb92"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-K8SIOAPIMACHINERYPKGUTILRUNTIME-8367153",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable k8s.io/apimachinery/pkg/util/runtime package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "k8s.io/apimachinery/pkg/util/runtime@v0.25.6"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
