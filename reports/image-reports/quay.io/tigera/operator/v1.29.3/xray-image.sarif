{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "addresses": [],
      "graphs": [],
      "invocations": [
        {
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": -1,
            "uri": "file:///tmp/jfrog.cli.temp.-1756737690-2533613232"
          }
        }
      ],
      "language": "en-US",
      "logicalLocations": [],
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "policies": [],
      "redactionTokens": [],
      "results": [
        {
          "fingerprints": {
            "jfrogFingerprintHash": "879a33561d548cc69dd704a233c60f3e"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-44487] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-44487] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c7367993e8212845152ce0f678db5906"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-44487] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-44487] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.29.0-alpha.3], [1.29.0-alpha.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-44487_k8s.io/apimachinery_0.25.6",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "4cc2d56c6343046b3b70803c577a6e60"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-45337] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2024-45337] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.31.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-45337_golang.org/x/crypto_0.6.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a0f1e95ff2b986a8a248c03b79ac36b9"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-48795] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-48795] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.6.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "b2acbff969a9e147380914d802294234"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22869] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2025-22869] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.35.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22869_golang.org/x/crypto_0.6.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "5d44ea3282e602f3385288af25638a61"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22868] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2025-22868] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.27.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22868_golang.org/x/oauth2_0.0.0-20220718184931-c8730f7fcb92",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "948b17d23521e6f4a6618449e7060a30"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45288] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-45288] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.23.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "736161caf6fbb0165adf48ed6f61e1c8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22870] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2025-22870] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.36.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22870_golang.org/x/net_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "be77787c6fc7ca45a5aa16428cb36a14"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22872] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2025-22872] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.38.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22872_golang.org/x/net_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "fb4a11b67a3baf169943691b770356ba"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-3978] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-3978] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.13.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "0719bc539ef4a641778460620d668fa7"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-39325] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-39325] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "850b68b564366df6c67f5c50b9f3b6a1"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-31416] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2023-31416] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[2.8]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-31416_github.com/elastic/cloud-on-k8s/v2_2.0.0-20221014162453-642f9ecd3e2e",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "d4160ea3f59fd819b4679192e18394a2"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24786] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar \nImage: quay.io/tigera/operator:v1.29.3\nLayer (sha256): b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9",
            "text": "[CVE-2024-24786] sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar "
          },
          "properties": {
            "fixedVersion": "[1.33.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.28.1",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        }
      ],
      "runAggregates": [],
      "taxonomies": [],
      "threadFlowLocations": [],
      "tool": {
        "driver": {
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "isComprehensive": false,
          "language": "en-US",
          "locations": [],
          "name": "JFrog Xray Scanner",
          "notifications": [],
          "rules": [
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.23.0]   |",
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.23.0]   |",
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."
              },
              "id": "CVE-2023-45288_golang.org/x/net_0.7.0",
              "name": "CVE-2023-45288-golang.org/x/net-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.38.0]   |",
                "text": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts)."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.38.0]   |",
                "text": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts)."
              },
              "id": "CVE-2025-22872_golang.org/x/net_0.7.0",
              "name": "CVE-2025-22872-golang.org/x/net-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22872] golang.org/x/net 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.17.0]   |",
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.17.0]   |",
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function."
              },
              "id": "CVE-2023-39325_golang.org/x/net_0.7.0",
              "name": "CVE-2023-39325-golang.org/x/net-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [2.8]   |",
                "text": "Secret token configuration is never applied when using ECK <2.8 with APM Server >=8.0. This could lead to anonymous requests to an APM Server being accepted and the data ingested into this APM deployment."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [2.8]   |",
                "text": "Secret token configuration is never applied when using ECK <2.8 with APM Server >=8.0. This could lead to anonymous requests to an APM Server being accepted and the data ingested into this APM deployment."
              },
              "id": "CVE-2023-31416_github.com/elastic/cloud-on-k8s/v2_2.0.0-20221014162453-642f9ecd3e2e",
              "name": "CVE-2023-31416-github.com/elastic/cloud-on-k8s/v2-2.0.0-20221014162453-642f9ecd3e2e",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "github.com/elastic/cloud-on-k8s/v2",
                      "version": "2.0.0-20221014162453-642f9ecd3e2e",
                      "location": {
                        "file": "github.com/elastic/cloud-on-k8s/v2"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-31416] github.com/elastic/cloud-on-k8s/v2 2.0.0-20221014162453-642f9ecd3e2e"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [1.33.0]   |",
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [1.33.0]   |",
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set."
              },
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.28.1",
              "name": "CVE-2024-24786-google.golang.org/protobuf-1.28.1",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "google.golang.org/protobuf",
                      "version": "1.28.1",
                      "location": {
                        "file": "google.golang.org/protobuf"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.28.1"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.29.0-alpha.3], [1.29.0-alpha.3]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.29.0-alpha.3], [1.29.0-alpha.3]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "id": "CVE-2023-44487_k8s.io/apimachinery_0.25.6",
              "name": "CVE-2023-44487-k8s.io/apimachinery-0.25.6",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "k8s.io/apimachinery",
                      "version": "0.25.6",
                      "location": {
                        "file": "k8s.io/apimachinery"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-44487] k8s.io/apimachinery 0.25.6"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.31.0]   |",
                "text": "Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass. The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions. For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key. Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.31.0]   |",
                "text": "Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass. The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions. For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key. Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding..."
              },
              "id": "CVE-2024-45337_golang.org/x/crypto_0.6.0",
              "name": "CVE-2024-45337-golang.org/x/crypto-0.6.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/crypto",
                      "version": "0.6.0",
                      "location": {
                        "file": "golang.org/x/crypto"
                      }
                    }
                  ]
                ],
                "security-severity": "9.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-45337] golang.org/x/crypto 0.6.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.17.0]   |",
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.17.0]   |",
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust."
              },
              "id": "CVE-2023-48795_golang.org/x/crypto_0.6.0",
              "name": "CVE-2023-48795-golang.org/x/crypto-0.6.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/crypto",
                      "version": "0.6.0",
                      "location": {
                        "file": "golang.org/x/crypto"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.6.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.27.0]   |",
                "text": "GHSA-6v2p-p543-phr9:\ngolang.org/x/oauth2 Improper Validation of Syntactic Correctness of Input vulnerability\nGHSA-3wqc-mwfx-672p:\nTraefik affected by Go oauth2/jws Improper Validation of Syntactic Correctness of Input vulnerability"
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.27.0]   |",
                "text": "GHSA-6v2p-p543-phr9:\ngolang.org/x/oauth2 Improper Validation of Syntactic Correctness of Input vulnerability\nGHSA-3wqc-mwfx-672p:\nTraefik affected by Go oauth2/jws Improper Validation of Syntactic Correctness of Input vulnerability"
              },
              "id": "CVE-2025-22868_golang.org/x/oauth2_0.0.0-20220718184931-c8730f7fcb92",
              "name": "CVE-2025-22868-golang.org/x/oauth2-0.0.0-20220718184931-c8730f7fcb92",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/oauth2",
                      "version": "0.0.0-20220718184931-c8730f7fcb92",
                      "location": {
                        "file": "golang.org/x/oauth2"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22868] golang.org/x/oauth2 0.0.0-20220718184931-c8730f7fcb92"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.4      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.36.0]   |",
                "text": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.4      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.36.0]   |",
                "text": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied."
              },
              "id": "CVE-2025-22870_golang.org/x/net_0.7.0",
              "name": "CVE-2025-22870-golang.org/x/net-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "4.4"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22870] golang.org/x/net 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.13.0]   |",
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.13.0]   |",
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack."
              },
              "id": "CVE-2023-3978_golang.org/x/net_0.7.0",
              "name": "CVE-2023-3978-golang.org/x/net-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.17.0]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.17.0]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "id": "CVE-2023-44487_golang.org/x/net_0.7.0",
              "name": "CVE-2023-44487-golang.org/x/net-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.35.0]   |",
                "text": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar `       | [0.35.0]   |",
                "text": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted."
              },
              "id": "CVE-2025-22869_golang.org/x/crypto_0.6.0",
              "name": "CVE-2025-22869-golang.org/x/crypto-0.6.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "quay.io/tigera/operator",
                      "version": "v1.29.3"
                    },
                    {
                      "name": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__b52822838ece446524ad9493ffef68b201a709ca6626540cfb2c8ee134dcaea9.tar"
                      }
                    },
                    {
                      "name": "command-line-arguments",
                      "version": "fcdad073369d930e70d571b84a7ffda61a538b0f29b12424c53eb7160af6ab26",
                      "location": {
                        "file": "usr/local/bin/operator"
                      }
                    },
                    {
                      "name": "golang.org/x/crypto",
                      "version": "0.6.0",
                      "location": {
                        "file": "golang.org/x/crypto"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22869] golang.org/x/crypto 0.6.0"
              }
            }
          ],
          "supportedTaxonomies": [],
          "taxa": [],
          "version": "3.127.6"
        },
        "extensions": []
      },
      "translations": [],
      "versionControlProvenance": [],
      "webRequests": [],
      "webResponses": []
    }
  ],
  "properties": {}
}

