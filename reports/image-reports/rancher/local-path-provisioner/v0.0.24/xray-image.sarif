{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "addresses": [],
      "graphs": [],
      "invocations": [
        {
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": -1,
            "uri": "file:///tmp/jfrog.cli.temp.-1756737743-2265713724"
          }
        }
      ],
      "language": "en-US",
      "logicalLocations": [],
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "policies": [],
      "redactionTokens": [],
      "results": [
        {
          "fingerprints": {
            "jfrogFingerprintHash": "0987a4ec9bd267781b983a8c3b2be33b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2020-8565] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2020-8565] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.16], [0.18.14], [0.19.6], [0.20.0-alpha.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2020-8565_k8s.io/client-go_0.19.1",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "8b42185bb177de7d0dd21ef688058ff1"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42363_3.17:busybox-binsh_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "3b6bd8860c5248b2a4391c37e98e1302"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42363_3.17:busybox_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "46e5fa31d8ef05616d4df51b467d61d3"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42363_3.17:ssl_client_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "2b2fdee124bd5a406760ff3674ccbe5d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42366] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42366] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r30]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42366_3.17:busybox-binsh_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "4aa43a76555f2652b70838ec9b27e142"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42366] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42366] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r30]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42366_3.17:busybox_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "e7b111a70787afc6b27de29586821031"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42366] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42366] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r30]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42366_3.17:ssl_client_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "dbd738626ab671e2bdf40a1d00d4e272"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-48174] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2022-48174] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.36.1-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-48174_3.17:busybox-binsh_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "43826c06387369ee63eb004484bfc2b4"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-48174] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2022-48174] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.36.1-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-48174_3.17:busybox_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "6b692fe76fcbc0a2af376df70d89e57d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-48174] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2022-48174] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.36.1-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-48174_3.17:ssl_client_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "df2092acc105f85fbf3a26e5c691e94b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42365] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42365] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42365_3.17:busybox_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "82a6d9e5e8e91852d943657360143bf0"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42365] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42365] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42365_3.17:ssl_client_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "5829d02fb5352dbd6dd174cad69f86ba"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42365] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42365] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42365_3.17:busybox-binsh_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "1e2e86cf09ffa6ebb43a686da4052311"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42364] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42364] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42364_3.17:busybox-binsh_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "9744c725e714cf4f5a4c385b635381ff"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42364] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42364] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42364_3.17:busybox_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "49c486452a82071f04ad30ecd1988310"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-42364] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-42364] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.35.0-r31]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-42364_3.17:ssl_client_1.35.0-r29",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c4219bdbb716c7b558bb1f90040fd5de"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45288] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45288] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.9], [1.22.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "aca0cef65d8f84363858f4f7c1604fb5"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45288] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45288] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.23.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.8.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "71654b50e0171bb7bbcabb9e007c348e"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22870] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-22870] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.36.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22870_golang.org/x/net_0.8.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "24a5de2e6521c45fd7b927022c0ee7b7"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22872] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-22872] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.38.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22872_golang.org/x/net_0.8.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "8ef03dfc47f556bfec52d607b9edf192"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-3978] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-3978] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.13.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.8.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "04444816553dc3f8fb48b2e5a6015c02"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-44487] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-44487] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.8.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "0ea6dbfe0ddab62e23881c11cc55c4a8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-44487] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-44487] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.29.0-alpha.3], [1.29.0-alpha.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-44487_k8s.io/apimachinery_0.19.1",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "eedff34e964eea846ca5a2aa03425f2a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-39325] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-39325] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.8.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "9c3072f627361d36e1880e264a2c05f0"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-6129] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-6129] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-6129_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "0b455704854bb6320ea63a9e1b5666a3"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-6129] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-6129] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-6129_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "cdc150e02e63b97080fe11f81fd23335"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-0465] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-0465] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-0465_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "4c8330ca6866df0ff5eaebaf2fb39281"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-0465] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-0465] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-0465_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "3ecc2e9e6f9dab020a797b96effcec25"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-6237] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-6237] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-6237_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f4dd392de809e1f95ff1ea2a1f06de4e"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-6237] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-6237] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-6237_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f0dfbbe336741c63e885c660c622a5be"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-3446] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-3446] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.9-r3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-3446_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "df4e88db5ff976210657ed5cbaf3a03c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-3446] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-3446] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.9-r3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-3446_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "6d6d784ce5bf2bdcfc11487b31b64213"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-0464] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-0464] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-0464_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "53e759aa28db1d56d5ffabfb71a1b2e7"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-0464] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-0464] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-0464_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "77e739f56efda60cd795ec8d21f60c33"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-2650] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-2650] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.9-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-2650_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "6c0b32b25f28c237a0e38fd695678936"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-2650] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-2650] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.9-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-2650_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "ae4e81cc0ade53d984f99eca66b9aa7a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-13176] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-13176] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.3.2-r5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-13176_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "267aaf12531692a7fd93ae0853a18b5c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-13176] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-13176] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.3.2-r5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-13176_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "d6f95f6c35109e1beb208fe5913b4809"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-4603] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-4603] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.13-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-4603_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f0bcc7053ce4107e0fd739ee66c2c4f3"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-4603] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-4603] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.13-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-4603_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "fd2c446314845e9210f490abaac9bb8a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-0727] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-0727] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-0727_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "0fdb99e42aa021771c5515dbaf549e62"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-0727] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-0727] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-0727_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "13279837771b376b39445293039d4bbc"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-4741] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-4741] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.14-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-4741_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a8aed59998e470821fab95ae74a31c8f"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-4741] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-4741] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.14-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-4741_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c23d32b5cf0fc49a494ab44d8eaed8a8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-9143] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-9143] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.15-r1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-9143_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "fe0d21b95ef803092f29b21a7bc3107d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-9143] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-9143] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.15-r1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-9143_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "42f2c092e9910de8d0b01e59514dc2d6"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-5535] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-5535] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.14-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-5535_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "4ac253ec252b311e43a14b0ada200a6c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-5535] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-5535] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.14-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-5535_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "d80d14549801f1e5d5a883954a65dd8a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-4575] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2025-4575] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.5.1-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-4575_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "cb155e851a99945044d97e1d9659a8b4"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-4575] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2025-4575] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.5.1-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-4575_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "3260017ab7c3e83b691c69b318887535"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-12797] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-12797] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.3.3-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-12797_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c63f48fb55080751d8229b84ce895c89"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-12797] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-12797] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.3.3-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-12797_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c57efda63ef9897f05452585c41d574b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-5363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-5363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-5363_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "290d9e1c2f226c191b92a2b85b187186"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-5363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-5363] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-5363_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "30ad458a403fb1f3320eb5494e343cd0"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-1255] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-1255] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-1255_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "33e8d6593a24786b4493f06650d61925"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-1255] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-1255] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-1255_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "bc62c5b3f8e8f0aa810428d5d949e2c2"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-2975] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-2975] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.9-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-2975_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "9b1cb889d25628eebe9fb96ba2394d1c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-2975] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-2975] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.9-r2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-2975_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "801caaf09056310bea72329062895ccd"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-2511] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-2511] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-2511_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "51028b88ebc8fd0c8bdea0cb8a04b9ff"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-2511] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-2511] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-2511_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "6e2bc752932b4de57933ce39dc08276d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-6119] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-6119] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.15-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-6119_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "58c7025edef0bbe6b5533be3c04ebe42"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-6119] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2024-6119] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.15-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-6119_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f2c6874cda19283a646fdf1f42efd819"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-5678] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-5678] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-5678_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "72055d83612256e8651610de63ea669a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-5678] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-5678] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.12-r1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-5678_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "42d161f1e0cb5ade388fb6ee189cd0ce"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-3817] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-3817] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.10-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-3817_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "b5de517b32eb2e016f140a110be34588"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-3817] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-3817] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.10-r0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-3817_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "33dd06d0ac2464597831152367a285be"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-0466] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-0466] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-0466_3.17:libcrypto3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "67c0be97b0eef6363296bf2bdd34c754"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-0466] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2023-0466] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[3.0.8-r3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-0466_3.17:libssl3_3.0.8-r0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a4518e9e2c241449c11be6155dc41995"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-45337] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-45337] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.31.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-45337_golang.org/x/crypto_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "ec412aac5bb87fd0da693080958aab7e"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-48795] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-48795] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.17.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "3509bb023437432d87c26477b1587e32"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22869] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-22869] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.35.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22869_golang.org/x/crypto_0.7.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "631825da2e1eb645c7414029cf155550"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24786] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24786] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.33.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.30.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "1c7c3455f15a3a67c0f8034220f77d04"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24536] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24536] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.8], [1.20.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "341f259f7daeaf3f02d7cd9978b22ffb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-41720] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-41720] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.18.9], [1.19.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "5321a0f13261a4752e44c90bb76c85fe"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-41715] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-41715] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.18.7], [1.19.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "485507e67be907c09d255e2919f966fb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24540] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24540] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.9], [1.20.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "17ed6d9efcbceb9573866e9efd01df85"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24784] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24784] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.8], [1.22.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24784_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "216d2e8c82e3ea99f887ce71e3d0ea23"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24531] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24531] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.0-0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24531_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a3008035e27c237df13357710d536465"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29403] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29403] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.10], [1.20.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "53af546eb99f0a755cc0dd158e0823f7"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24783] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24783] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.8], [1.22.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24783_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f4ac550fac54e8dab2d17c54952f6a59"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-41722] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-41722] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.6], [1.20.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a8828ccf3e3cfbc79296afb8147fa7d4"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29409] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29409] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.12], [1.20.7], [1.21.0-rc.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "ca590efdf4ada92fc09de81bd7880b00"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24539] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24539] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.9], [1.20.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "7173185c6b736bad95a21c0912da48bf"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-2880] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-2880] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.18.7], [1.19.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "4fbde926db7e27ec8eb7ed48ee3fca00"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29402] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29402] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.10], [1.20.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "b32793296541342a3b859852cbfa2a50"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29404] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29404] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.10], [1.20.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "3dcc04dcc03dc577c3488ab60a479f9d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-4673] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-4673] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.23.10], [1.24.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-4673_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "197ab25361590c11c014d70c13a4d3a9"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-45341] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-45341] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.22.11], [1.23.5], [1.24.0-rc.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-45341_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "097a528656d9d9a2121fb69c04410f95"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-39323] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-39323] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.9], [1.21.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "06309a5d7a2f0f030f42d0db5e06a19a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24790] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24790] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.11], [1.22.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24790_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "80ae88a71c841c5f0698616f7b8e28aa"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45287] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45287] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c6c47d5f8e28453ebd6dcc188d6a2b60"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22871] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-22871] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.23.8], [1.24.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22871_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "ff5419f3a0b498658a272d39a06dbbc8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45283] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45283] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.11], [1.20.12], [1.21.4], [1.21.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "7c01707c0b1b3f2e4d2097ed7cf358b3"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-34158] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-34158] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.22.7], [1.23.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-34158_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "12475e7668fa73834036d002548cee05"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45284] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45284] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.11], [1.21.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "6e3e4ff24eca5478c35f4eea2eca8877"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29405] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29405] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.10], [1.20.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c1d7e3075926ac6a317998c7e6f78d88"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24538] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24538] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.8], [1.20.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a12370ac076728bd19298f20d52fc85b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-39326] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-39326] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.12], [1.21.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "e83c0ebcf6e6c20bde5ea0ec7e579a9e"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24537] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24537] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.8], [1.20.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "d2bbaab23a5a491b36f2a7adff50ce5d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24791] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24791] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.12], [1.22.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24791_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "05bb8ea6416d51491913dc49ec7baaca"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-0913] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-0913] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.23.10], [1.24.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-0913_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "8eb611eaa523866c8550071d3bf4d655"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45290] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45290] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.8], [1.22.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45290_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "5042b986efd050338f55002ee2f23137"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22866] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-22866] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.22.12], [1.23.6], [1.24.0-rc.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22866_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "8dbf8237d2393de52e40570eb571bbaa"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24534] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24534] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.8], [1.20.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "56e4a75681d2db5dd85272a1d050c455"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-47907] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-47907] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.23.12], [1.24.6]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-47907_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "d9e147b87175c2377659aabdbb0dd97f"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45285] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45285] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.12], [1.21.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "b743c77e7de370ef7ba2e6a4aeb74fef"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-34156] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-34156] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.22.7], [1.23.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-34156_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "cc235d305fc0e0c6564f4693c8b2eb62"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24787] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24787] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.10], [1.22.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24787_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "96ae540acf39e6fbe32c78451426c09c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-24532] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-24532] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.7], [1.20.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "82ada6302e3ac5457247193a7aa58dfb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-41724] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-41724] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.6], [1.20.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "d3897c9c208a13c6a32c99694c77cd69"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24785] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24785] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.8], [1.22.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24785_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "9f084d6acb7bd04cfa1deba40f4a3a09"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-39318] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-39318] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.8], [1.21.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "b2a6246671f1055e67f3f5ef6a3f6949"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29400] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29400] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.9], [1.20.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "6b37487219c41d958b80345879b0e34d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-4674] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-4674] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.23.11], [1.24.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-4674_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c248f51e4ce100ea452198b79b43f2e1"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-45289] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-45289] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.8], [1.22.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-45289_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "11552532b9ece00ca3897f07bc778232"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-2879] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-2879] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.18.7], [1.19.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f68c41654926dd3b7650ebcdb1b32ddf"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-39319] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-39319] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.20.8], [1.21.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "fb1a010601711166cea9a06b74909ea6"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-41725] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-41725] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.6], [1.20.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "18bb3cea167dd1890374c7a4f7b3315b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-24789] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-24789] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.21.11], [1.22.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-24789_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c0964803d7392781614ce1e3688830b5"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-41716] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2022-41716] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.18.8], [1.19.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "a838a1b48e1a77ea7383bf2e173ce580"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-34155] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-34155] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.22.7], [1.23.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-34155_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "7f5d2a60a596e4b7077789412b1872c6"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2023-29406] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2023-29406] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.19.11], [1.20.6]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "9cc4702eb9b2508cdcfb22f329949859"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-45336] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2024-45336] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.22.11], [1.23.5], [1.24.0-rc.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-45336_github.com/golang/go_1.17.13",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "c977e96e0a30c8f5b5efdefd413f04d3"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-26519] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2025-26519] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.2.3-r6]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-26519_3.17:musl-utils_1.2.3-r4",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "49a0661c362b5ef6ab9a7792b4b78d7c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-26519] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39",
            "text": "[CVE-2025-26519] sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar "
          },
          "properties": {
            "fixedVersion": "[1.2.3-r6]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-26519_3.17:musl_1.2.3-r4",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "f6611b22f43720a3fc4919df28f3e5ad"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-22868] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2025-22868] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[0.27.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-22868_golang.org/x/oauth2_0.6.0",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "fingerprints": {
            "jfrogFingerprintHash": "e5c41ca3fa7bab469d15aa55f84338da"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [
                {
                  "index": -1,
                  "kind": "layer",
                  "name": "7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
                  "parentIndex": -1,
                  "properties": {
                    "algorithm": "sha256"
                  }
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "file://sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2021-3121] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar \nImage: rancher/local-path-provisioner:v0.0.24\nLayer (sha256): 7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b",
            "text": "[CVE-2021-3121] sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar "
          },
          "properties": {
            "fixedVersion": "[1.3.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2021-3121_github.com/gogo/protobuf_1.3.1",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        }
      ],
      "runAggregates": [],
      "taxonomies": [],
      "threadFlowLocations": [],
      "tool": {
        "driver": {
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "isComprehensive": false,
          "language": "en-US",
          "locations": [],
          "name": "JFrog Xray Scanner",
          "notifications": [],
          "rules": [
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion. With fix, the ParseMultipartForm function now correctly limits the maximum size of form lines."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion. With fix, the ParseMultipartForm function now correctly limits the maximum size of form lines."
              },
              "id": "CVE-2023-45290_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45290-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45290] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.9], [1.20.4]   |",
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.9], [1.20.4]   |",
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags."
              },
              "id": "CVE-2023-29400_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29400-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.8], [1.19.3]   |",
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\"."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.8], [1.19.3]   |",
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\"."
              },
              "id": "CVE-2022-41716_github.com/golang/go_1.17.13",
              "name": "CVE-2022-41716-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.8], [1.24.2]   |",
                "text": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.8], [1.24.2]   |",
                "text": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext."
              },
              "id": "CVE-2025-22871_github.com/golang/go_1.17.13",
              "name": "CVE-2025-22871-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22871] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.4      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.4      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates."
              },
              "id": "CVE-2024-24785_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24785-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.4"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24785] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1."
              },
              "id": "CVE-2023-42363_3.17:busybox-binsh_1.35.0-r29",
              "name": "CVE-2023-42363-3.17:busybox-binsh-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox-binsh",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox-binsh:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.17:busybox-binsh 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.38.0]   |",
                "text": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts)."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.38.0]   |",
                "text": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts)."
              },
              "id": "CVE-2025-22872_golang.org/x/net_0.8.0",
              "name": "CVE-2025-22872-golang.org/x/net-0.8.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.8.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22872] golang.org/x/net 0.8.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers."
              },
              "id": "CVE-2023-29403_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29403-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.12], [1.21.5]   |",
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.12], [1.21.5]   |",
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small."
              },
              "id": "CVE-2023-39326_github.com/golang/go_1.17.13",
              "name": "CVE-2023-39326-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow."
              },
              "id": "CVE-2023-24537_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24537-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r2]   |",
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r2]   |",
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue."
              },
              "id": "CVE-2023-6129_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-6129-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r4]   |",
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r4]   |",
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-0727_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-0727-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.10-r0]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.10-r0]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "id": "CVE-2023-3817_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-3817-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.9], [1.20.4]   |",
                "text": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.9], [1.20.4]   |",
                "text": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input."
              },
              "id": "CVE-2023-24539_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24539-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.10], [1.24.4]   |",
                "text": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.10], [1.24.4]   |",
                "text": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information."
              },
              "id": "CVE-2025-4673_github.com/golang/go_1.17.13",
              "name": "CVE-2025-4673-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-4673] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.0]   |",
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.0]   |",
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels."
              },
              "id": "CVE-2023-45287_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45287-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.27.0]   |",
                "text": "GHSA-6v2p-p543-phr9:\ngolang.org/x/oauth2 Improper Validation of Syntactic Correctness of Input vulnerability\nGHSA-3wqc-mwfx-672p:\nTraefik affected by Go oauth2/jws Improper Validation of Syntactic Correctness of Input vulnerability"
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.27.0]   |",
                "text": "GHSA-6v2p-p543-phr9:\ngolang.org/x/oauth2 Improper Validation of Syntactic Correctness of Input vulnerability\nGHSA-3wqc-mwfx-672p:\nTraefik affected by Go oauth2/jws Improper Validation of Syntactic Correctness of Input vulnerability"
              },
              "id": "CVE-2025-22868_golang.org/x/oauth2_0.6.0",
              "name": "CVE-2025-22868-golang.org/x/oauth2-0.6.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/oauth2",
                      "version": "0.6.0",
                      "location": {
                        "file": "golang.org/x/oauth2"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22868] golang.org/x/oauth2 0.6.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r4]   |",
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r4]   |",
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one."
              },
              "id": "CVE-2023-1255_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-1255-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.0      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.12], [1.24.6]   |",
                "text": "Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.0      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.12], [1.24.6]   |",
                "text": "Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error."
              },
              "id": "CVE-2025-47907_github.com/golang/go_1.17.13",
              "name": "CVE-2025-47907-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.0"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-47907] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.12], [1.21.5]   |",
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off)."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.12], [1.21.5]   |",
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off)."
              },
              "id": "CVE-2023-45285_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45285-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.36.1-r2]   |",
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.36.1-r2]   |",
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution."
              },
              "id": "CVE-2022-48174_3.17:busybox_1.35.0-r29",
              "name": "CVE-2022-48174-3.17:busybox-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.17:busybox 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r1]   |",
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r1]   |",
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "id": "CVE-2023-0464_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-0464-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r0]   |",
                "text": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r0]   |",
                "text": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-6119_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-6119-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-6119] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.11], [1.22.4]   |",
                "text": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.11], [1.22.4]   |",
                "text": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms."
              },
              "id": "CVE-2024-24790_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24790-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24790] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.7], [1.19.2]   |",
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.7], [1.19.2]   |",
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB."
              },
              "id": "CVE-2022-2879_github.com/golang/go_1.17.13",
              "name": "CVE-2022-2879-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.6], [1.20.1]   |",
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.6], [1.20.1]   |",
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ..."
              },
              "id": "CVE-2022-41725_github.com/golang/go_1.17.13",
              "name": "CVE-2022-41725-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r30]   |",
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r30]   |",
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159."
              },
              "id": "CVE-2023-42366_3.17:busybox-binsh_1.35.0-r29",
              "name": "CVE-2023-42366-3.17:busybox-binsh-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox-binsh",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox-binsh:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.17:busybox-binsh 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.11], [1.20.6]   |",
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.11], [1.20.6]   |",
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value."
              },
              "id": "CVE-2023-29406_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29406-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r0]   |",
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r0]   |",
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are..."
              },
              "id": "CVE-2023-5363_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-5363-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r0]   |",
                "text": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r0]   |",
                "text": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-6119_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-6119-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-6119] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r3]   |",
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r3]   |",
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications."
              },
              "id": "CVE-2023-0466_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-0466-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected)."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected)."
              },
              "id": "CVE-2023-29402_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29402-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers."
              },
              "id": "CVE-2023-29404_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29404-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.5.1-r0]   |",
                "text": "Issue summary: Use of -addreject option with the openssl x509 application adds\na trusted use instead of a rejected use for a certificate.\n\nImpact summary: If a user intends to make a trusted certificate rejected for\na particular use it will be instead marked as trusted for that use.\n\nA copy & paste error during minor refactoring of the code introduced this\nissue in the OpenSSL 3.5 version. If, for example, a trusted CA certificate\nshould be trusted only for the purpose of authenticating TLS servers but not\nfor CMS signature verification and the CMS signature verification is intended\nto be marked as rejected with the -addreject option, the resulting CA\ncertificate will be trusted for CMS signature verification purpose instead.\n\nOnly users which use the trusted certificate format who use the openssl x509\ncommand line application to add rejected uses are affected by this issue.\nThe issues affecting only the command line application are considered to\nbe Low severity.\n\nThe FIPS modules in 3.5, 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this\nissue.\n\nOpenSSL 3.4, 3.3, 3.2, 3.1, 3.0, 1.1.1 and 1.0.2 are also not affected by this\nissue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.5.1-r0]   |",
                "text": "Issue summary: Use of -addreject option with the openssl x509 application adds\na trusted use instead of a rejected use for a certificate.\n\nImpact summary: If a user intends to make a trusted certificate rejected for\na particular use it will be instead marked as trusted for that use.\n\nA copy & paste error during minor refactoring of the code introduced this\nissue in the OpenSSL 3.5 version. If, for example, a trusted CA certificate\nshould be trusted only for the purpose of authenticating TLS servers but not\nfor CMS signature verification and the CMS signature verification is intended\nto be marked as rejected with the -addreject option, the resulting CA\ncertificate will be trusted for CMS signature verification purpose instead.\n\nOnly users which use the trusted certificate format who use the openssl x509\ncommand line application to add rejected uses are affected by this issue.\nThe issues affecting only the command line application are considered to\nbe Low severity.\n\nThe FIPS modules in 3.5, 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this\nissue.\n\nOpenSSL 3.4, 3.3, 3.2, 3.1, 3.0, 1.1.1 and 1.0.2 are also not affected by this\nissue."
              },
              "id": "CVE-2025-4575_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2025-4575-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-4575] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r0]   |",
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r0]   |",
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are..."
              },
              "id": "CVE-2023-5363_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-5363-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.0]   |",
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.0]   |",
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust."
              },
              "id": "CVE-2023-48795_golang.org/x/crypto_0.7.0",
              "name": "CVE-2023-48795-golang.org/x/crypto-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/crypto",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/crypto"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ..."
              },
              "id": "CVE-2024-5535_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-5535-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "9.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-5535] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.7], [1.19.2]   |",
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.7], [1.19.2]   |",
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged."
              },
              "id": "CVE-2022-2880_github.com/golang/go_1.17.13",
              "name": "CVE-2022-2880-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.12], [1.22.5]   |",
                "text": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail. An attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.12], [1.22.5]   |",
                "text": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail. An attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail."
              },
              "id": "CVE-2024-24791_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24791-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24791] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.16], [0.18.14], [0.19.6], [0.20.0-alpha.2]   |",
                "text": "In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects <= v1.19.3, <= v1.18.10, <= v1.17.13, < v1.20.0-alpha2."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.16], [0.18.14], [0.19.6], [0.20.0-alpha.2]   |",
                "text": "In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects <= v1.19.3, <= v1.18.10, <= v1.17.13, < v1.20.0-alpha2."
              },
              "id": "CVE-2020-8565_k8s.io/client-go_0.19.1",
              "name": "CVE-2020-8565-k8s.io/client-go-0.19.1",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "k8s.io/client-go",
                      "version": "0.19.1",
                      "location": {
                        "file": "k8s.io/client-go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2020-8565] k8s.io/client-go 0.19.1"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function."
              },
              "id": "CVE-2023-42365_3.17:busybox_1.35.0-r29",
              "name": "CVE-2023-42365-3.17:busybox-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.17:busybox 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r3]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r3]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "id": "CVE-2023-3446_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-3446-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r2]   |",
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r2]   |",
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue."
              },
              "id": "CVE-2023-2975_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-2975-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.7], [1.19.2]   |",
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.7], [1.19.2]   |",
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected."
              },
              "id": "CVE-2022-41715_github.com/golang/go_1.17.13",
              "name": "CVE-2022-41715-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.7], [1.23.1]   |",
                "text": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.7], [1.23.1]   |",
                "text": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion."
              },
              "id": "CVE-2024-34155_github.com/golang/go_1.17.13",
              "name": "CVE-2024-34155-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "4.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-34155] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function."
              },
              "id": "CVE-2023-42365_3.17:ssl_client_1.35.0-r29",
              "name": "CVE-2023-42365-3.17:ssl-client-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:ssl_client",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:ssl_client:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.17:ssl_client 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r2]   |",
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r2]   |",
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue."
              },
              "id": "CVE-2023-6129_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-6129-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r4]   |",
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r4]   |",
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-0727_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-0727-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ..."
              },
              "id": "CVE-2024-5535_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-5535-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "9.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-5535] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r3]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r3]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "id": "CVE-2023-3446_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-3446-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.13-r0]   |",
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.13-r0]   |",
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "id": "CVE-2024-4603_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-4603-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.0      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.12], [1.23.6], [1.24.0-rc.3]   |",
                "text": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.0      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.12], [1.23.6], [1.24.0-rc.3]   |",
                "text": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols."
              },
              "id": "CVE-2025-22866_github.com/golang/go_1.17.13",
              "name": "CVE-2025-22866-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "4.0"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22866] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.7], [1.20.2]   |",
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.7], [1.20.2]   |",
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh."
              },
              "id": "CVE-2023-24532_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24532-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.11], [1.22.4]   |",
                "text": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.11], [1.22.4]   |",
                "text": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors."
              },
              "id": "CVE-2024-24789_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24789-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24789] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.9], [1.22.2]   |",
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.9], [1.22.2]   |",
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."
              },
              "id": "CVE-2023-45288_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45288-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.23.0]   |",
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.23.0]   |",
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."
              },
              "id": "CVE-2023-45288_golang.org/x/net_0.8.0",
              "name": "CVE-2023-45288-golang.org/x/net-0.8.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.8.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.8.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.4      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.36.0]   |",
                "text": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.4      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.36.0]   |",
                "text": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied."
              },
              "id": "CVE-2025-22870_golang.org/x/net_0.8.0",
              "name": "CVE-2025-22870-golang.org/x/net-0.8.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.8.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "4.4"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22870] golang.org/x/net 0.8.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r2]   |",
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r2]   |",
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "id": "CVE-2023-0465_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-0465-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.9], [1.20.4]   |",
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.9], [1.20.4]   |",
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution."
              },
              "id": "CVE-2023-24540_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24540-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.0-0]   |",
                "text": "Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making \"go env\" print them out."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.0-0]   |",
                "text": "Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making \"go env\" print them out."
              },
              "id": "CVE-2023-24531_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24531-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24531] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |",
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |",
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored."
              },
              "id": "CVE-2023-45283_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45283-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.2.3-r6]   |",
                "text": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.2.3-r6]   |",
                "text": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8."
              },
              "id": "CVE-2025-26519_3.17:musl_1.2.3-r4",
              "name": "CVE-2025-26519-3.17:musl-1.2.3-r4",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:musl",
                      "version": "1.2.3-r4",
                      "location": {
                        "file": "3.17:musl:1.2.3-r4"
                      }
                    }
                  ]
                ],
                "security-severity": "8.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-26519] 3.17:musl 1.2.3-r4"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |",
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |",
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable."
              },
              "id": "CVE-2023-29409_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29409-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r1]   |",
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r1]   |",
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "id": "CVE-2023-0464_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-0464-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function."
              },
              "id": "CVE-2023-42364_3.17:busybox-binsh_1.35.0-r29",
              "name": "CVE-2023-42364-3.17:busybox-binsh-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox-binsh",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox-binsh:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.17:busybox-binsh 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function."
              },
              "id": "CVE-2023-42364_3.17:ssl_client_1.35.0-r29",
              "name": "CVE-2023-42364-3.17:ssl-client-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:ssl_client",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:ssl_client:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.17:ssl_client 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.2-r5]   |",
                "text": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.2-r5]   |",
                "text": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue."
              },
              "id": "CVE-2024-13176_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-13176-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "4.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-13176] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers."
              },
              "id": "CVE-2024-24784_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24784-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24784] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.6      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.11], [1.24.5]   |",
                "text": "The go command may execute unexpected commands when operating in untrusted VCS repositories. This occurs when possibly dangerous VCS configuration is present in repositories. This can happen when a repository was fetched via one VCS (e.g. Git), but contains metadata for another VCS (e.g. Mercurial). Modules which are retrieved using the go command line, i.e. via \"go get\", are not affected."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.6      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.11], [1.24.5]   |",
                "text": "The go command may execute unexpected commands when operating in untrusted VCS repositories. This occurs when possibly dangerous VCS configuration is present in repositories. This can happen when a repository was fetched via one VCS (e.g. Git), but contains metadata for another VCS (e.g. Mercurial). Modules which are retrieved using the go command line, i.e. via \"go get\", are not affected."
              },
              "id": "CVE-2025-4674_github.com/golang/go_1.17.13",
              "name": "CVE-2025-4674-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "8.6"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-4674] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r4]   |",
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r4]   |",
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one."
              },
              "id": "CVE-2023-1255_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-1255-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r3]   |",
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r3]   |",
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications."
              },
              "id": "CVE-2023-0466_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-0466-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.6], [1.20.1]   |",
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\"."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.6], [1.20.1]   |",
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\"."
              },
              "id": "CVE-2022-41722_github.com/golang/go_1.17.13",
              "name": "CVE-2022-41722-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.7], [1.23.1]   |",
                "text": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.7], [1.23.1]   |",
                "text": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635."
              },
              "id": "CVE-2024-34156_github.com/golang/go_1.17.13",
              "name": "CVE-2024-34156-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-34156] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.2.3-r6]   |",
                "text": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.2.3-r6]   |",
                "text": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8."
              },
              "id": "CVE-2025-26519_3.17:musl-utils_1.2.3-r4",
              "name": "CVE-2025-26519-3.17:musl-utils-1.2.3-r4",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:musl-utils",
                      "version": "1.2.3-r4",
                      "location": {
                        "file": "3.17:musl-utils:1.2.3-r4"
                      }
                    }
                  ]
                ],
                "security-severity": "8.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-26519] 3.17:musl-utils 1.2.3-r4"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.6      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.3.2]   |",
                "text": "An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the \"skippy peanut butter\" issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.6      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.3.2]   |",
                "text": "An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the \"skippy peanut butter\" issue."
              },
              "id": "CVE-2021-3121_github.com/gogo/protobuf_1.3.1",
              "name": "CVE-2021-3121-github.com/gogo/protobuf-1.3.1",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/gogo/protobuf",
                      "version": "1.3.1",
                      "location": {
                        "file": "github.com/gogo/protobuf"
                      }
                    }
                  ]
                ],
                "security-severity": "8.6"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2021-3121] github.com/gogo/protobuf 1.3.1"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.36.1-r2]   |",
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.36.1-r2]   |",
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution."
              },
              "id": "CVE-2022-48174_3.17:busybox-binsh_1.35.0-r29",
              "name": "CVE-2022-48174-3.17:busybox-binsh-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox-binsh",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox-binsh:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.17:busybox-binsh 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r1]   |",
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r1]   |",
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "id": "CVE-2023-5678_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-5678-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.9], [1.19.4]   |",
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.18.9], [1.19.4]   |",
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error."
              },
              "id": "CVE-2022-41720_github.com/golang/go_1.17.13",
              "name": "CVE-2022-41720-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers."
              },
              "id": "CVE-2023-24534_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24534-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r0]   |",
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r0]   |",
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL..."
              },
              "id": "CVE-2023-2650_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-2650-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.10-r0]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.10-r0]   |",
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "id": "CVE-2023-3817_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-3817-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r30]   |",
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r30]   |",
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159."
              },
              "id": "CVE-2023-42366_3.17:ssl_client_1.35.0-r29",
              "name": "CVE-2023-42366-3.17:ssl-client-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:ssl_client",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:ssl_client:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.17:ssl_client 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.0]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.0]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "id": "CVE-2023-44487_golang.org/x/net_0.8.0",
              "name": "CVE-2023-44487-golang.org/x/net-0.8.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.8.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.8.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r5]   |",
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r5]   |",
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue."
              },
              "id": "CVE-2024-2511_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-2511-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.31.0]   |",
                "text": "Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass. The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions. For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key. Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.31.0]   |",
                "text": "Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass. The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions. For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key. Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding..."
              },
              "id": "CVE-2024-45337_golang.org/x/crypto_0.7.0",
              "name": "CVE-2024-45337-golang.org/x/crypto-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/crypto",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/crypto"
                      }
                    }
                  ]
                ],
                "security-severity": "9.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-45337] golang.org/x/crypto 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.35.0]   |",
                "text": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.35.0]   |",
                "text": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted."
              },
              "id": "CVE-2025-22869_golang.org/x/crypto_0.7.0",
              "name": "CVE-2025-22869-golang.org/x/crypto-0.7.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/crypto",
                      "version": "0.7.0",
                      "location": {
                        "file": "golang.org/x/crypto"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-22869] golang.org/x/crypto 0.7.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.9], [1.21.2]   |",
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.9], [1.21.2]   |",
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex."
              },
              "id": "CVE-2023-39323_github.com/golang/go_1.17.13",
              "name": "CVE-2023-39323-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "8.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.10], [1.20.5]   |",
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler."
              },
              "id": "CVE-2023-29405_github.com/golang/go_1.17.13",
              "name": "CVE-2023-29405-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.8], [1.21.1]   |",
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.8], [1.21.1]   |",
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack."
              },
              "id": "CVE-2023-39319_github.com/golang/go_1.17.13",
              "name": "CVE-2023-39319-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function."
              },
              "id": "CVE-2023-42365_3.17:busybox-binsh_1.35.0-r29",
              "name": "CVE-2023-42365-3.17:busybox-binsh-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox-binsh",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox-binsh:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.17:busybox-binsh 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.13-r0]   |",
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.13-r0]   |",
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "id": "CVE-2024-4603_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-4603-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.3-r0]   |",
                "text": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.3-r0]   |",
                "text": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-12797_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-12797-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-12797] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.6], [1.20.1]   |",
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert)."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.6], [1.20.1]   |",
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert)."
              },
              "id": "CVE-2022-41724_github.com/golang/go_1.17.13",
              "name": "CVE-2022-41724-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r30]   |",
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r30]   |",
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159."
              },
              "id": "CVE-2023-42366_3.17:busybox_1.35.0-r29",
              "name": "CVE-2023-42366-3.17:busybox-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.17:busybox 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.29.0-alpha.3], [1.29.0-alpha.3]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.29.0-alpha.3], [1.29.0-alpha.3]   |",
                "text": "Rapidly creating and cancelling streams (HEADERS frame immediately followed by RST_STREAM) without bound causes denial of service (High)"
              },
              "id": "CVE-2023-44487_k8s.io/apimachinery_0.19.1",
              "name": "CVE-2023-44487-k8s.io/apimachinery-0.19.1",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "k8s.io/apimachinery",
                      "version": "0.19.1",
                      "location": {
                        "file": "k8s.io/apimachinery"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-44487] k8s.io/apimachinery 0.19.1"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r2]   |",
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.8-r2]   |",
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "id": "CVE-2023-0465_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-0465-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r1]   |",
                "text": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r1]   |",
                "text": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-9143_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-9143-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "4.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-9143] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.3-r0]   |",
                "text": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.3-r0]   |",
                "text": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-12797_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-12797-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-12797] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r1]   |",
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r1]   |",
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue."
              },
              "id": "CVE-2023-5678_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-5678-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-4741_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-4741-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-4741] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r1]   |",
                "text": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.15-r1]   |",
                "text": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-9143_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-9143-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "4.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-9143] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.8], [1.21.1]   |",
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.8], [1.21.1]   |",
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack."
              },
              "id": "CVE-2023-39318_github.com/golang/go_1.17.13",
              "name": "CVE-2023-39318-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1."
              },
              "id": "CVE-2023-42363_3.17:ssl_client_1.35.0-r29",
              "name": "CVE-2023-42363-3.17:ssl-client-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:ssl_client",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:ssl_client:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.17:ssl_client 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.36.1-r2]   |",
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.36.1-r2]   |",
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution."
              },
              "id": "CVE-2022-48174_3.17:ssl_client_1.35.0-r29",
              "name": "CVE-2022-48174-3.17:ssl-client-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:ssl_client",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:ssl_client:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.17:ssl_client 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function."
              },
              "id": "CVE-2023-42364_3.17:busybox_1.35.0-r29",
              "name": "CVE-2023-42364-3.17:busybox-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.17:busybox 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r3]   |",
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r3]   |",
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "id": "CVE-2023-6237_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2023-6237-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r2]   |",
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r2]   |",
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue."
              },
              "id": "CVE-2023-2975_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-2975-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution."
              },
              "id": "CVE-2023-24538_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24538-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not. A maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not. A maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded."
              },
              "id": "CVE-2023-45289_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45289-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "4.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45289] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.2-r5]   |",
                "text": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.1      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.3.2-r5]   |",
                "text": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue."
              },
              "id": "CVE-2024-13176_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2024-13176-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "4.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-13176] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.11], [1.23.5], [1.24.0-rc.2]   |",
                "text": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain. Certificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.11], [1.23.5], [1.24.0-rc.2]   |",
                "text": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain. Certificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs."
              },
              "id": "CVE-2024-45341_github.com/golang/go_1.17.13",
              "name": "CVE-2024-45341-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-45341] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.11], [1.21.4]   |",
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.20.11], [1.21.4]   |",
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local."
              },
              "id": "CVE-2023-45284_github.com/golang/go_1.17.13",
              "name": "CVE-2023-45284-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.33.0]   |",
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.33.0]   |",
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set."
              },
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.30.0",
              "name": "CVE-2024-24786-google.golang.org/protobuf-1.30.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "google.golang.org/protobuf",
                      "version": "1.30.0",
                      "location": {
                        "file": "google.golang.org/protobuf"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.30.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.7], [1.23.1]   |",
                "text": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.7], [1.23.1]   |",
                "text": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion."
              },
              "id": "CVE-2024-34158_github.com/golang/go_1.17.13",
              "name": "CVE-2024-34158-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-34158] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.5.1-r0]   |",
                "text": "Issue summary: Use of -addreject option with the openssl x509 application adds\na trusted use instead of a rejected use for a certificate.\n\nImpact summary: If a user intends to make a trusted certificate rejected for\na particular use it will be instead marked as trusted for that use.\n\nA copy & paste error during minor refactoring of the code introduced this\nissue in the OpenSSL 3.5 version. If, for example, a trusted CA certificate\nshould be trusted only for the purpose of authenticating TLS servers but not\nfor CMS signature verification and the CMS signature verification is intended\nto be marked as rejected with the -addreject option, the resulting CA\ncertificate will be trusted for CMS signature verification purpose instead.\n\nOnly users which use the trusted certificate format who use the openssl x509\ncommand line application to add rejected uses are affected by this issue.\nThe issues affecting only the command line application are considered to\nbe Low severity.\n\nThe FIPS modules in 3.5, 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this\nissue.\n\nOpenSSL 3.4, 3.3, 3.2, 3.1, 3.0, 1.1.1 and 1.0.2 are also not affected by this\nissue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.5.1-r0]   |",
                "text": "Issue summary: Use of -addreject option with the openssl x509 application adds\na trusted use instead of a rejected use for a certificate.\n\nImpact summary: If a user intends to make a trusted certificate rejected for\na particular use it will be instead marked as trusted for that use.\n\nA copy & paste error during minor refactoring of the code introduced this\nissue in the OpenSSL 3.5 version. If, for example, a trusted CA certificate\nshould be trusted only for the purpose of authenticating TLS servers but not\nfor CMS signature verification and the CMS signature verification is intended\nto be marked as rejected with the -addreject option, the resulting CA\ncertificate will be trusted for CMS signature verification purpose instead.\n\nOnly users which use the trusted certificate format who use the openssl x509\ncommand line application to add rejected uses are affected by this issue.\nThe issues affecting only the command line application are considered to\nbe Low severity.\n\nThe FIPS modules in 3.5, 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this\nissue.\n\nOpenSSL 3.4, 3.3, 3.2, 3.1, 3.0, 1.1.1 and 1.0.2 are also not affected by this\nissue."
              },
              "id": "CVE-2025-4575_3.17:libcrypto3_3.0.8-r0",
              "name": "CVE-2025-4575-3.17:libcrypto3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libcrypto3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libcrypto3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-4575] 3.17:libcrypto3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.4      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.10], [1.22.3]   |",
                "text": "On Darwin, building a Go module which contains CGO can trigger arbitrary code execution when using the Apple version of ld, due to usage of the -lto_library flag in a \"#cgo LDFLAGS\" directive."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.4      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.10], [1.22.3]   |",
                "text": "On Darwin, building a Go module which contains CGO can trigger arbitrary code execution when using the Apple version of ld, due to usage of the -lto_library flag in a \"#cgo LDFLAGS\" directive."
              },
              "id": "CVE-2024-24787_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24787-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.4"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24787] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [1.35.0-r31]   |",
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1."
              },
              "id": "CVE-2023-42363_3.17:busybox_1.35.0-r29",
              "name": "CVE-2023-42363-3.17:busybox-1.35.0-r29",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:busybox",
                      "version": "1.35.0-r29",
                      "location": {
                        "file": "3.17:busybox:1.35.0-r29"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.17:busybox 1.35.0-r29"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.13.0]   |",
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.13.0]   |",
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack."
              },
              "id": "CVE-2023-3978_golang.org/x/net_0.8.0",
              "name": "CVE-2023-3978-golang.org/x/net-0.8.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.8.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.8.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.0]   |",
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [0.17.0]   |",
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function."
              },
              "id": "CVE-2023-39325_golang.org/x/net_0.8.0",
              "name": "CVE-2023-39325-golang.org/x/net-0.8.0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "golang.org/x/net",
                      "version": "0.8.0",
                      "location": {
                        "file": "golang.org/x/net"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.8.0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r3]   |",
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r3]   |",
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue."
              },
              "id": "CVE-2023-6237_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-6237-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r0]   |",
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL..."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.9-r0]   |",
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL..."
              },
              "id": "CVE-2023-2650_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2023-2650-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.11], [1.23.5], [1.24.0-rc.2]   |",
                "text": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com. In the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.22.11], [1.23.5], [1.24.0-rc.2]   |",
                "text": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com. In the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2."
              },
              "id": "CVE-2024-45336_github.com/golang/go_1.17.13",
              "name": "CVE-2024-45336-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-45336] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.14-r0]   |",
                "text": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue."
              },
              "id": "CVE-2024-4741_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-4741-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-4741] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r5]   |",
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar `       | [3.0.12-r5]   |",
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue."
              },
              "id": "CVE-2024-2511_3.17:libssl3_3.0.8-r0",
              "name": "CVE-2024-2511-3.17:libssl3-3.0.8-r0",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7cd52847ad775a5ddc4b58326cf884beee34544296402c6292ed76474c686d39.tar"
                      }
                    },
                    {
                      "name": "3.17:libssl3",
                      "version": "3.0.8-r0",
                      "location": {
                        "file": "3.17:libssl3:3.0.8-r0"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.17:libssl3 3.0.8-r0"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.19.8], [1.20.3]   |",
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=."
              },
              "id": "CVE-2023-24536_github.com/golang/go_1.17.13",
              "name": "CVE-2023-24536-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic. This affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.21.8], [1.22.1]   |",
                "text": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic. This affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates."
              },
              "id": "CVE-2024-24783_github.com/golang/go_1.17.13",
              "name": "CVE-2024-24783-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-24783] github.com/golang/go 1.17.13"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.10], [1.24.4]   |",
                "text": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink."
              },
              "help": {
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar `       | [1.23.10], [1.24.4]   |",
                "text": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink."
              },
              "id": "CVE-2025-0913_github.com/golang/go_1.17.13",
              "name": "CVE-2025-0913-github.com/golang/go-1.17.13",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "rancher/local-path-provisioner",
                      "version": "v0.0.24"
                    },
                    {
                      "name": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar",
                      "version": "",
                      "location": {
                        "file": "sha256__7a7ca71364720aa2b1e6520048af172058ec11c8d59ff474390d622b6367200b.tar"
                      }
                    },
                    {
                      "name": "github.com/rancher/local-path-provisioner",
                      "version": "64a5579a30594d4c77c2773c42ff400327fe2bd5aeef88ad5117c58884d195e9",
                      "location": {
                        "file": "usr/bin/local-path-provisioner"
                      }
                    },
                    {
                      "name": "github.com/golang/go",
                      "version": "1.17.13",
                      "location": {
                        "file": "github.com/golang/go"
                      }
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-0913] github.com/golang/go 1.17.13"
              }
            }
          ],
          "supportedTaxonomies": [],
          "taxa": [],
          "version": "3.127.6"
        },
        "extensions": []
      },
      "translations": [],
      "versionControlProvenance": [],
      "webRequests": [],
      "webResponses": []
    }
  ],
  "properties": {}
}

