{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[]}],"results":[{"fingerprints":{"matchBasedId/v1":"eaef54fd8853741c254360e30c93ba779487eb294e1380ab01977514773b831bfb5614d66357089815d7e0c1137984f207949818e82a5a03193a98f273725e28_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Dockerfile","uriBaseId":"%SRCROOT%"},"region":{"endColumn":23,"endLine":11,"snippet":{"text":"CMD [ \"npm\", \"start\" ]"},"startColumn":1,"startLine":11}}}],"message":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"properties":{},"ruleId":"dockerfile.security.missing-user.missing-user"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from index.js:6 to index.js:6"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: '{\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n}' @ 'index.js:6'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":2,"endLine":12,"message":{"text":"Source: '{\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n}' @ 'index.js:6'"},"snippet":{"text":"{\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n}"},"startColumn":25,"startLine":6}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'var client = new Client({\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n})' @ 'index.js:6'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":2,"endLine":12,"message":{"text":"Sink: 'var client = new Client({\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n})' @ 'index.js:6'"},"snippet":{"text":"var client = new Client({\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n})"},"startColumn":25,"startLine":6}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"d4c519ce7ccda75b6d61d27cb9f063420b8237bdbcd5df8d09b3cd02f0a6c2a168b17992fe46043734d3b71b0320f52ad7c5fde983ae6d9f72ebc4f1b595d092_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"index.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":2,"endLine":12,"snippet":{"text":"var client = new Client({\n  user: \"postgres\",\n  password: \"mysecretpassword\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"postgres\",\n})"},"startColumn":25,"startLine":6}}}],"message":{"text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM)."},"properties":{},"ruleId":"javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret"},{"fingerprints":{"matchBasedId/v1":"b99e34bc823d648134e9f945815c4cb093ddb8f4449cba5a0143e65fd6101fc44c411a6beeb05d4f7450130e7f3722a86856e06981b994c4befc3946b4108421_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"index.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":22,"endLine":30,"snippet":{"text":"  var app = express();"},"startColumn":7,"startLine":30}}}],"message":{"text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"properties":{},"ruleId":"javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from index.js:33 to index.js:33"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'req.query' @ 'index.js:33'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":33,"endLine":33,"message":{"text":"Source: 'req.query' @ 'index.js:33'"},"snippet":{"text":"req.query"},"startColumn":24,"startLine":33}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'res.send(`Hello, ${req.query.name}`)' @ 'index.js:33'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":38,"endLine":33,"message":{"text":"Sink: 'res.send(`Hello, ${req.query.name}`)' @ 'index.js:33'"},"snippet":{"text":"    res.send(`Hello, ${req.query.name}`)"},"startColumn":14,"startLine":33}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"e5f1c9ce6ae2ed579490ff8d72743293d36ee07fff07df116186b86fad942176d56656381da0309683fd9c90017de7df26cc419ab92c1bd418d3cdea9bbd847f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"index.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":33,"snippet":{"text":"    res.send(`Hello, ${req.query.name}`)"},"startColumn":14,"startLine":33}}}],"message":{"text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"properties":{},"ruleId":"javascript.express.security.audit.xss.direct-response-write.direct-response-write"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from index.js:46 to index.js:44"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'req' @ 'index.js:46'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":54,"endLine":46,"message":{"text":"Source: 'req' @ 'index.js:46'"},"snippet":{"text":"req"},"startColumn":51,"startLine":46}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'var user = await client.query(`select *' @ 'index.js:44'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":30,"endLine":44,"message":{"text":"Sink: 'var user = await client.query(`select *' @ 'index.js:44'"},"snippet":{"text":"      var user = await client.query(`select *"},"startColumn":24,"startLine":44}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"64ee9c7280e31532833dcd7e557c8aa65372bd8a69b9fdb69134e6ff4b084d4578888a356311e70c5bd9fcbbb2c5d64c1ebc252ed0643eeec10f9bde8b450522_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"index.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":44,"snippet":{"text":"      var user = await client.query(`select *"},"startColumn":24,"startLine":44}}}],"message":{"text":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."},"properties":{},"ruleId":"javascript.express.db.pg-express.pg-express"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from index.js:46 to index.js:47"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'req.params' @ 'index.js:46'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":61,"endLine":46,"message":{"text":"Source: 'req.params' @ 'index.js:46'"},"snippet":{"text":"req.params"},"startColumn":51,"startLine":46}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : '`' @ 'index.js:44'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":38,"endLine":44,"message":{"text":"Propagator : '`' @ 'index.js:44'"},"snippet":{"text":"`"},"startColumn":37,"startLine":44}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'await' @ 'index.js:44'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":23,"endLine":44,"message":{"text":"Propagator : 'await' @ 'index.js:44'"},"snippet":{"text":"await"},"startColumn":18,"startLine":44}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'user' @ 'index.js:44'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":15,"endLine":44,"message":{"text":"Propagator : 'user' @ 'index.js:44'"},"snippet":{"text":"user"},"startColumn":11,"startLine":44}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'res.send(user.rows[0]);' @ 'index.js:47'"},"physicalLocation":{"artifactLocation":{"uri":"index.js"},"region":{"endColumn":28,"endLine":47,"message":{"text":"Sink: 'res.send(user.rows[0]);' @ 'index.js:47'"},"snippet":{"text":"      res.send(user.rows[0]);"},"startColumn":16,"startLine":47}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"4fb5f6d7f53cb0911a20a44911d367bcd54371f1a134eec8517970dd0f58e2d3b0371748045c9b6856dfa53900282bb709882fb694b59c4d6e0047fbec3bb4d1_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"index.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":28,"endLine":47,"snippet":{"text":"      res.send(user.rows[0]);"},"startColumn":16,"startLine":47}}}],"message":{"text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"properties":{},"ruleId":"javascript.express.security.audit.xss.direct-response-write.direct-response-write"},{"fingerprints":{"matchBasedId/v1":"3056f647677546743b410379a9364527ff5efc63279126c24e27741de1fbc06309fe824f4ef7a3195899e9e1df7023831bf50d9c9bfda00e63d8d75fef04923f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package-lock.json","uriBaseId":"%SRCROOT%"},"region":{"endColumn":1,"endLine":626,"snippet":{"text":"    \"node_modules/lodash\": {"},"startColumn":1,"startLine":626}}}],"message":{"text":"Affected versions of lodash, lodash-es, lodash.trim, and lodash.trimend are vulnerable to Inefficient Regular Expression Complexity / Uncontrolled Resource Consumption."},"properties":{"exposure":"unreachable"},"ruleId":"ssc-2d0fa972-cd75-562c-cd04-2127373eee90"},{"fingerprints":{"matchBasedId/v1":"66ce2a764b85160ce147d4b649617992e852159bf0cd5cddced34a5b9340623937c4c5e931ae999faa96716c0937b1d57104d0675427523c41a1c572fb55f0bc_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package-lock.json","uriBaseId":"%SRCROOT%"},"region":{"endColumn":1,"endLine":626,"snippet":{"text":"    \"node_modules/lodash\": {"},"startColumn":1,"startLine":626}}}],"message":{"text":"lodash versions prior to 4.17.21 (or lodash.template version 4.6.2) are vulnerable to Command Injection via the template function. Please remediate by updating to version 4.17.21 (or 4.6.2). https://github.com/advisories/GHSA-35jh-r3h4-6jhm"},"properties":{"exposure":"unreachable"},"ruleId":"ssc-c6bc1896-7044-4b22-b31a-753d52070423"},{"fingerprints":{"matchBasedId/v1":"06cc9dd3aee6c39a4c5cddb9ec853c630d451ec15947d96dbd382269688ec9f0a9d02469ed9528fb56173292135d880d01d3085736cd84886ef150c3e96eeff5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"views/hello.pug","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":5,"snippet":{"text":"        p!= 'Hello, ' + name"},"startColumn":9,"startLine":5}}}],"message":{"text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"properties":{},"ruleId":"javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape"}],"tool":{"driver":{"name":"Semgrep PRO","rules":[{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"help":{"markdown":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.missing-user.missing-user)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"helpUri":"https://semgrep.dev/r/dockerfile.security.missing-user.missing-user","id":"dockerfile.security.missing-user.missing-user","name":"dockerfile.security.missing-user.missing-user","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: dockerfile.security.missing-user.missing-user"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."},"help":{"markdown":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.db.pg-express.pg-express)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."},"helpUri":"https://semgrep.dev/r/javascript.express.db.pg-express.pg-express","id":"javascript.express.db.pg-express.pg-express","name":"javascript.express.db.pg-express.pg-express","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.db.pg-express.pg-express"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"help":{"markdown":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage)\n - [https://www.npmjs.com/package/csurf](https://www.npmjs.com/package/csurf)\n - [https://www.npmjs.com/package/csrf](https://www.npmjs.com/package/csrf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"helpUri":"https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage","id":"javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage","name":"javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"help":{"markdown":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"helpUri":"https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write","id":"javascript.express.security.audit.xss.direct-response-write.direct-response-write","name":"javascript.express.security.audit.xss.direct-response-write.direct-response-write","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.security.audit.xss.direct-response-write.direct-response-write"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape)\n - [https://pugjs.org/language/code.html#unescaped-buffered-code](https://pugjs.org/language/code.html#unescaped-buffered-code)\n - [https://pugjs.org/language/attributes.html#unescaped-attributes](https://pugjs.org/language/attributes.html#unescaped-attributes)\n","text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"helpUri":"https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape","id":"javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape","name":"javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM)."},"help":{"markdown":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM)."},"helpUri":"https://semgrep.dev/r/javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret","id":"javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret","name":"javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Affected versions of lodash, lodash-es, lodash.trim, and lodash.trimend are vulnerable to Inefficient Regular Expression Complexity / Uncontrolled Resource Consumption."},"help":{"markdown":"Affected versions of lodash, lodash-es, lodash.trim, and lodash.trimend are vulnerable to Inefficient Regular Expression Complexity / Uncontrolled Resource Consumption.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-2d0fa972-cd75-562c-cd04-2127373eee90)\n - [https://github.com/advisories/GHSA-29mw-wpgm-hmr9](https://github.com/advisories/GHSA-29mw-wpgm-hmr9)\n - [https://nvd.nist.gov/vuln/detail/CVE-2020-28500](https://nvd.nist.gov/vuln/detail/CVE-2020-28500)\n","text":"Affected versions of lodash, lodash-es, lodash.trim, and lodash.trimend are vulnerable to Inefficient Regular Expression Complexity / Uncontrolled Resource Consumption."},"helpUri":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-2d0fa972-cd75-562c-cd04-2127373eee90","id":"ssc-2d0fa972-cd75-562c-cd04-2127373eee90","name":"ssc-2d0fa972-cd75-562c-cd04-2127373eee90","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","CWE-400: Uncontrolled Resource Consumption","HIGH CONFIDENCE","OWASP-A06:2021 - Vulnerable and Outdated Components","security"]},"shortDescription":{"text":"Semgrep Finding: ssc-2d0fa972-cd75-562c-cd04-2127373eee90"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"lodash versions prior to 4.17.21 (or lodash.template version 4.6.2) are vulnerable to Command Injection via the template function. Please remediate by updating to version 4.17.21 (or 4.6.2). https://github.com/advisories/GHSA-35jh-r3h4-6jhm"},"help":{"markdown":"lodash versions prior to 4.17.21 (or lodash.template version 4.6.2) are vulnerable to Command Injection via the template function. Please remediate by updating to version 4.17.21 (or 4.6.2). https://github.com/advisories/GHSA-35jh-r3h4-6jhm\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-c6bc1896-7044-4b22-b31a-753d52070423)\n - [https://github.com/advisories/GHSA-35jh-r3h4-6jhm](https://github.com/advisories/GHSA-35jh-r3h4-6jhm)\n - [https://nvd.nist.gov/vuln/detail/CVE-2021-23337](https://nvd.nist.gov/vuln/detail/CVE-2021-23337)\n","text":"lodash versions prior to 4.17.21 (or lodash.template version 4.6.2) are vulnerable to Command Injection via the template function. Please remediate by updating to version 4.17.21 (or 4.6.2). https://github.com/advisories/GHSA-35jh-r3h4-6jhm"},"helpUri":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-c6bc1896-7044-4b22-b31a-753d52070423","id":"ssc-c6bc1896-7044-4b22-b31a-753d52070423","name":"ssc-c6bc1896-7044-4b22-b31a-753d52070423","properties":{"precision":"very-high","tags":["CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')","CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","CWE-94: Improper Control of Generation of Code ('Code Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","OWASP-A06:2021 - Vulnerable and Outdated Components","security"]},"shortDescription":{"text":"Semgrep Finding: ssc-c6bc1896-7044-4b22-b31a-753d52070423"}}],"semanticVersion":"1.134.0"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}